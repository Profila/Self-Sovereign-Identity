# generated by datamodel-codegen:
#   filename:  docs.yaml
#   timestamp: 2024-04-24T18:05:48+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Field, constr


class AcceptConnectionInvitationRequest(BaseModel):
    invitation: str = Field(
        ...,
        description='The base64-encoded raw invitation.',
        example='eyJAaWQiOiIzZmE4NWY2NC01NzE3LTQ1NjItYjNmYy0yYzk2M2Y2NmFmYTYiLCJAdHlwZSI6Imh0dHBzOi8vZGlkY29tbS5vcmcvbXktZmFtaWx5LzEuMC9teS1tZXNzYWdlLXR5cGUiLCJkaWQiOiJXZ1d4cXp0ck5vb0c5MlJYdnhTVFd2IiwiaW1hZ2VVcmwiOiJodHRwOi8vMTkyLjE2OC41Ni4xMDEvaW1nL2xvZ28uanBnIiwibGFiZWwiOiJCb2IiLCJyZWNpcGllbnRLZXlzIjpbIkgzQzJBVnZMTXY2Z21NTmFtM3VWQWpacGZrY0pDd0R3blpuNnozd1htcVBWIl0sInJvdXRpbmdLZXlzIjpbIkgzQzJBVnZMTXY2Z21NTmFtM3VWQWpacGZrY0pDd0R3blpuNnozd1htcVBWIl0sInNlcnZpY2VFbmRwb2ludCI6Imh0dHA6Ly8xOTIuMTY4LjU2LjEwMTo4MDIwIn0=',
    )


class AcceptCredentialOfferRequest(BaseModel):
    subjectId: Optional[str] = Field(
        None,
        description='The short-form subject Prism DID to which the JWT verifiable credential will be issued.This parameter is used for JWT credentials only.',
        example='did:prism:3bb0505d13fcb04d28a48234edb27b0d4e6d7e18a81e2c1abab58f3bbc21ce6f',
    )


class ActionType(Enum):
    ADD_KEY = 'ADD_KEY'
    ADD_SERVICE = 'ADD_SERVICE'
    PATCH_CONTEXT = 'PATCH_CONTEXT'
    REMOVE_KEY = 'REMOVE_KEY'
    REMOVE_SERVICE = 'REMOVE_SERVICE'
    UPDATE_SERVICE = 'UPDATE_SERVICE'


class ApiKeyAuthenticationRequest(BaseModel):
    entityId: UUID = Field(
        ...,
        description='The `entityId` of the entity to be updated',
        example='01234567-0000-0000-0000-000000000000',
    )
    apiKey: constr(min_length=16, max_length=128) = Field(
        ...,
        description='The `apikey` of the entity to be updated',
        example='dkflks3DflkFmkllnDfde',
    )


class Arr(BaseModel):
    elements: Optional[List] = None


class Bool(BaseModel):
    value: bool


class Role(Enum):
    Inviter = 'Inviter'
    Invitee = 'Invitee'


class State(Enum):
    InvitationGenerated = 'InvitationGenerated'
    InvitationReceived = 'InvitationReceived'
    ConnectionRequestPending = 'ConnectionRequestPending'
    ConnectionRequestSent = 'ConnectionRequestSent'
    ConnectionRequestReceived = 'ConnectionRequestReceived'
    ConnectionResponsePending = 'ConnectionResponsePending'
    ConnectionResponseSent = 'ConnectionResponseSent'
    ConnectionResponseReceived = 'ConnectionResponseReceived'
    ProblemReportPending = 'ProblemReportPending'
    ProblemReportSent = 'ProblemReportSent'
    ProblemReportReceived = 'ProblemReportReceived'


class ConnectionInvitation(BaseModel):

    id: UUID = Field(
        ...,
        description='The unique identifier of the invitation. It should be used as parent thread ID (pthid) for the Connection Request message that follows.',
        example='0527aea1-d131-3948-a34d-03af39aba8b4',
    )
    type: str = Field(
        ...,
        description='The DIDComm Message Type URI (MTURI) the invitation message complies with.',
        example='https://didcomm.org/out-of-band/2.0/invitation',
    )
    from_: str = Field(
        ...,
        alias='_from',
        description='The DID representing the sender to be used by recipients for future interactions.',
        example='did:peer:1234457',
    )
    invitation_url: str = Field(
        ...,
        description='The invitation message encoded as a URL. This URL follows the Out of [Band 2.0 protocol](https://identity.foundation/didcomm-messaging/spec/v2.0/#out-of-band-messages) and can be used to generate a QR code for example.',
        example='https://my.domain.com/path?_oob=eyJAaWQiOiIzZmE4NWY2NC01NzE3LTQ1NjItYjNmYy0yYzk2M2Y2NmFmYTYiLCJAdHlwZSI6Imh0dHBzOi8vZGlkY29tbS5vcmcvbXktZmFtaWx5LzEuMC9teS1tZXNzYWdlLXR5cGUiLCJkaWQiOiJXZ1d4cXp0ck5vb0c5MlJYdnhTVFd2IiwiaW1hZ2VVcmwiOiJodHRwOi8vMTkyLjE2OC41Ni4xMDEvaW1nL2xvZ28uanBnIiwibGFiZWwiOiJCb2IiLCJyZWNpcGllbnRLZXlzIjpbIkgzQzJBVnZMTXY2Z21NTmFtM3VWQWpacGZrY0pDd0R3blpuNnozd1htcVBWIl0sInJvdXRpbmdLZXlzIjpbIkgzQzJBVnZMTXY2Z21NTmFtM3VWQWpacGZrY0pDd0R3blpuNnozd1htcVBWIl0sInNlcnZpY2VFbmRwb2ludCI6Imh0dHA6Ly8xOTIuMTY4LjU2LjEwMTo4MDIwIn0=',
    )

    class Config:
        allow_population_by_field_name = True
    


class CreateConnectionRequest(BaseModel):
    label: Optional[str] = Field(
        None, description='A human readable alias for the connection.', example='Peter'
    )


class CreateEntityRequest(BaseModel):
    id: Optional[UUID] = Field(
        None,
        description='The new `id` of the entity to be created. If this field is not provided, the server will generate a new UUID for the entity',
        example='00000000-0000-0000-0000-000000000000',
    )
    name: constr(min_length=1, max_length=128) = Field(
        ...,
        description='The new `name` of the entity to be created. If this field is not provided, the server will generate a random name for the entity',
        example='John Doe',
    )
    walletId: Optional[UUID] = Field(
        None,
        description='The new `walletId` of the entity to be created. If this field is not provided, the server will set the default `walletId`',
        example='00000000-0000-0000-0000-000000000000',
    )


class CreateIssueCredentialRecordRequest(BaseModel):
    validityPeriod: Optional[float] = Field(
        None,
        description='The validity period in seconds of the verifiable credential that will be issued.',
        example=3600.0,
    )
    schemaId: Optional[str] = Field(
        None,
        description='The unique identifier of the schema used for this credential offer.',
        example='https://agent-host.com/prism-agent/schema-registry/schemas/d9569cec-c81e-4779-aa86-0d5994d82676',
    )
    credentialDefinitionId: Optional[UUID] = Field(
        None,
        description='The unique identifier of the credential definition used for this credential offer (AnonCreds only)',
        example='d9569cec-c81e-4779-aa86-0d5994d82676',
    )
    credentialFormat: Optional[str] = Field(
        None,
        description="The format used for this credential offer (default to 'JWT')",
        example='JWT',
    )
    claims: Any = Field(
        ...,
        description='The claims that will be associated with the issued verifiable credential.',
        example='(firstname,Alice)',
    )
    automaticIssuance: Optional[bool] = Field(
        None,
        description='Specifies whether or not the credential should be automatically generated and issued when receiving the `CredentialRequest` from the holder. If set to `false`, a manual approval by the issuer via API call will be required for the VC to be issued.',
        example=True,
    )
    issuingDID: Optional[str] = Field(
        None,
        description='The issuer DID of the verifiable credential (JWT credentials only)',
        example='did:prism:issuerofverifiablecredentials',
    )
    connectionId: UUID = Field(
        ...,
        description='The unique identifier of a DIDComm connection that already exists between the issuer and the holder, and that will be used to execute the issue credential protocol.',
        example='d9569cec-c81e-4779-aa86-0d5994d82676',
    )


class CreateManagedDIDResponse(BaseModel):
    longFormDid: str = Field(
        ...,
        description='A long-form DID for the created DID',
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff:Cr4BCrsBElsKBmF1dGgtMRAEQk8KCXNlY3AyNTZrMRIg0opTuxu-zt6aRbT1tPniG4eu4CYsQPM3rrLzvzNiNgwaIIFTnyT2N4U7qCQ78qtWC3-p0el6Hvv8qxG5uuEw-WgMElwKB21hc3RlcjAQAUJPCglzZWNwMjU2azESIKhBU0eCOO6Vinz_8vhtFSAhYYqrkEXC8PHGxkuIUev8GiAydFHLXb7c22A1Uj_PR21NZp6BCDQqNq2xd244txRgsQ',
    )


class CreateWalletRequest(BaseModel):
    seed: Optional[str] = Field(
        None,
        description='A BIP32 seed encoded in hexadecimal string. It is expected to represent 64-bytes binary seed (128 hex characters).',
        example='c9994785ce6d548134020f610b76102ca1075d3bb672a75ec8c9a27a7b8607e3b9b384e43b77bb08f8d5159651ae38b98573f7ecc79f2d7e1f1cc371ce60cf8a',
    )
    name: constr(min_length=1, max_length=128) = Field(
        ..., description='A name of the wallet', example='my-wallet-1'
    )
    id: Optional[UUID] = Field(
        None,
        description='The unique `id` of the wallet. Randomly generated if not specified.',
        example='00000000-0000-0000-0000-000000000000',
    )


class CredentialDefinitionInput(BaseModel):
    name: constr(min_length=1) = Field(
        ...,
        description='A human-readable name for the credential definition. A piece of Metadata.',
        example='DrivingLicense',
    )
    description: Optional[constr(min_length=1)] = Field(
        None,
        description='A human-readable description of the credential definition',
        example='Simple credential definition for the driving licence verifiable credential.',
    )
    version: constr(
        min_length=1
    ) = Field(
        ...,
        description='Denotes the revision of a given Credential Definition. It should follow semantic version convention to describe the impact of the credential definition evolution.',
        example='1.0.0',
    )
    tag: str = Field(
        ...,
        description='Token that allow to lookup and filter the credential definition records.',
        example='licence',
    )
    author: constr(
        min_length=1
    ) = Field(
        ...,
        description='DID of the identity which authored the credential definition. A piece of Metadata.',
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff',
    )
    schemaId: str = Field(
        ...,
        description='The unique identifier of the schema used for this credential definition.',
        example='https://agent-host.com/prism-agent/schema-registry/schemas/d9569cec-c81e-4779-aa86-0d5994d82676',
    )
    signatureType: str = Field(
        ...,
        description='Signature type used in the CredentialDefinition.',
        example='CL',
    )
    supportRevocation: bool = Field(
        ...,
        description='Boolean flag indicating whether revocation is supported for this CredentialDefinition.',
        example=False,
    )


class CredentialSchemaInput(BaseModel):
    name: constr(min_length=1) = Field(
        ...,
        description='A human-readable name for the credential schema. A piece of Metadata.',
        example='DrivingLicense',
    )
    version: constr(
        min_length=1
    ) = Field(
        ...,
        description='Denotes the revision of a given Credential Schema. It should follow semantic version convention to describe the impact of the schema evolution.',
        example='1.0.0',
    )
    description: Optional[constr(min_length=1)] = Field(
        None,
        description='A human-readable description of the credential schema',
        example='Simple credential schema for the driving licence verifiable credential.',
    )
    type: str = Field(
        ...,
        description='This field resolves to a JSON schema with details about the schema metadata that applies to the schema. A piece of Metadata.',
        example='https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json',
    )
    schema_: Any = Field(
        ...,
        alias='schema',
        description='Valid JSON Schema where the Credential Schema data fields are defined. A piece of Metadata',
        example={
            '$id': 'https://example.com/driving-license-1.0',
            '$schema': 'https://json-schema.org/draft/2020-12/schema',
            'description': 'Driving License',
            'type': 'object',
            'properties': {
                'emailAddress': {'type': 'string', 'format': 'email'},
                'givenName': {'type': 'string'},
                'familyName': {'type': 'string'},
                'dateOfIssuance': {'type': 'string', 'format': 'date-time'},
                'drivingLicenseID': {'type': 'string'},
                'drivingClass': {'type': 'integer'},
            },
            'required': [
                'emailAddress',
                'familyName',
                'dateOfIssuance',
                'drivingLicenseID',
                'drivingClass',
            ],
            'additionalProperties': False,
        },
    )
    tags: Optional[List[str]] = Field(
        None,
        description='Tokens that allow to lookup and filter the credential schema records.',
        example=['driving', 'licence', 'id'],
    )
    author: constr(
        min_length=1
    ) = Field(
        ...,
        description='DID of the identity which authored the credential schema. A piece of Metadata.',
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff',
    )


class DIDDocumentMetadata(BaseModel):
    deactivated: Optional[bool] = Field(
        None,
        description='If a DID has been deactivated, DID document metadata MUST include this property with the boolean value true. If a DID has not been deactivated, this property is OPTIONAL, but if included, MUST have the boolean value false.',
        example=False,
    )
    canonical_id: Optional[str] = Field(
        None,
        description='\nA DID in canonical form.\nIf a DID is in long form and has been published, DID document metadata MUST contain a `canonicalId`` property with the short form DID as its value.\nIf a DID in short form or has not been published, DID document metadata MUST NOT contain a `canonicalId` property.\n',
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff',
    )
    version_id: Optional[str] = Field(
        None,
        description="\nDID document metadata MUST contain a versionId property with the hash of the AtalaOperation contained in the latest valid SignedAtalaOperation that created the DID or changed the DID's internal state.\n",
        example='4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff',
    )
    created: Optional[str] = Field(
        None,
        description='The timestamp of the Cardano block that contained the first valid SignedAtalaOperation with a CreateDIDOperation that created the DID.',
        example='2023-02-04T13:52:10Z',
    )
    updated: Optional[str] = Field(
        None,
        description="The timestamp of the Cardano block that contained the latest valid SignedAtalaOperation that changed the DID's internal state.",
        example='2023-02-04T13:52:10Z',
    )


class DIDResolutionMetadata(BaseModel):
    error: Optional[str] = Field(
        None,
        description='Resolution error constant according to [DID spec registries](https://www.w3.org/TR/did-spec-registries/#error)',
        example='invalidDid',
    )
    error_message: Optional[str] = Field(
        None,
        description='Resolution error message',
        example='The initialState does not match the suffix',
    )
    content_type: Optional[str] = Field(
        None,
        description='The media type of the returned DID document',
        example='application/did+ld+json',
    )


class DidOperationSubmission(BaseModel):
    id: str = Field(
        ...,
        description='A scheduled operation ID',
        example='98e6a4db10e58fcc011dd8def5ce99fd8b52af39e61e5fb436dc28259139818b',
    )
    didRef: str = Field(
        ...,
        description='A DID affected by the scheduled operation',
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff',
    )


class EntityResponse(BaseModel):
    kind: str = Field(..., description='The `kind` of the entity.', example='Entity')
    
    id: UUID = Field(
        ...,
        description='The unique `id` of the entity',
        example='00000000-0000-0000-0000-000000000000',
    )
    name: str = Field(..., description='The `name` of the entity.', example='John Doe')
    wallet_id: UUID = Field(
        ...,
        description='The `walletId` owned by the entity.',
        example='00000000-0000-0000-0000-000000000000',
    )
    created_at: datetime = Field(
        ...,
        description='The `createdAt` timestamp of the entity.',
        example='2023-01-01T00:00:00Z',
    )
    updated_at: datetime = Field(
        ...,
        description='The `updatedAt` timestamp of the entity.',
        example='2023-01-01T00:00:00Z',
    )


class EntityResponsePage(BaseModel):
    contents: Optional[List[EntityResponse]] = Field(
        None,
        description='A sequence of CredentialSchemaResponse objects representing the list of credential schemas that the API response contains',
        example=[
            'EntityResponse(Entity,/prism-agent/iam/entities/00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000000,John Doe,00000000-0000-0000-0000-000000000000,2023-01-01T00:00:00Z,2023-01-01T00:00:00Z)'
        ],
    )
    kind: str = Field(
        ...,
        description='A string field indicating the type of the API response. In this case, it will always be set to `CredentialSchemaPage`',
        example='CredentialSchemaPage',
    )
    # self: str = Field(
    #     ...,
    #     description='A string field containing the URL of the current API endpoint',
    #     example='/prism-agent/schema-registry/schemas?skip=10&limit=10',
    # )
    page_of: str = Field(
        ...,
        description='A string field indicating the type of resource that the contents field contains',
        example='/prism-agent/schema-registry/schemas',
    )
    next: Optional[str] = Field(
        None,
        description='An optional string field containing the URL of the next page of results. If the API response does not contain any more pages, this field should be set to None.',
        example='/prism-agent/schema-registry/schemas?skip=20&limit=10',
    )
    previous: Optional[str] = Field(
        None,
        description='An optional string field containing the URL of the previous page of results. If the API response is the first page of results, this field should be set to None.',
        example='/prism-agent/schema-registry/schemas?skip=0&limit=10',
    )


class ErrorResponse(BaseModel):
    status: int = Field(
        ...,
        description='The HTTP status code for this occurrence of the problem.',
        example=200,
    )
    type: str = Field(
        ...,
        description='A URI reference that identifies the problem type.',
        example='https://example.org/doc/#model-MalformedEmail/',
    )
    title: str = Field(
        ...,
        description='A short, human-readable summary of the problem type. It does not change from occurrence to occurrence of the problem.',
        example='Malformed email',
    )
    detail: Optional[str] = Field(
        None,
        description='A human-readable explanation specific to this occurrence of the problem.',
        example="The received '{}à!è@!.b}' email does not conform to the email format",
    )
    instance: str = Field(
        ...,
        description='A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.',
        example="The received '{}à!è@!.b}' email does not conform to the email format",
    )


class HealthInfo(BaseModel):
    version: str = Field(
        ...,
        description='The semantic version number of the running service',
        example='1.1.0',
    )


class CredentialFormat(Enum):
    JWT = 'JWT'
    AnonCreds = 'AnonCreds'


class Role1(Enum):
    Issuer = 'Issuer'
    Holder = 'Holder'


class ProtocolState(Enum):
    OfferPending = 'OfferPending'
    OfferSent = 'OfferSent'
    OfferReceived = 'OfferReceived'
    RequestPending = 'RequestPending'
    RequestGenerated = 'RequestGenerated'
    RequestSent = 'RequestSent'
    RequestReceived = 'RequestReceived'
    CredentialPending = 'CredentialPending'
    CredentialGenerated = 'CredentialGenerated'
    CredentialSent = 'CredentialSent'
    CredentialReceived = 'CredentialReceived'
    ProblemReportPending = 'ProblemReportPending'
    ProblemReportSent = 'ProblemReportSent'
    ProblemReportReceived = 'ProblemReportReceived'


class IssueCredentialRecord(BaseModel):
    record_id: str = Field(
        ...,
        description='The unique identifier of the issue credential record.',
        example='80d612dc-0ded-4ac9-90b4-1b8eabb04545',
    )
    thid: str = Field(
        ...,
        description='The unique identifier of the thread this credential record belongs to. The value will identical on both sides of the issue flow (issuer and holder)',
        example='0527aea1-d131-3948-a34d-03af39aba8b4',
    )
    credential_format: CredentialFormat = Field(
        ...,
        description="The format used for this credential offer (default to 'JWT')",
        example='JWT',
    )
    subject_id: Optional[str] = Field(
        None,
        description='The identifier (e.g DID) of the subject to which the verifiable credential will be issued.',
        example='did:prism:subjectofverifiablecredentials',
    )
    validity_period: Optional[float] = Field(
        None,
        description='The validity period in seconds of the verifiable credential that will be issued.',
        example=3600.0,
    )
    claims: Any = Field(
        ...,
        description='The claims that will be associated with the issued verifiable credential.',
        example='(firstname,Alice)',
    )
    automatic_issuance: Optional[bool] = Field(
        None,
        description='Specifies whether or not the credential should be automatically generated and issued when receiving the `CredentialRequest` from the holder. If set to `false`, a manual approval by the issuer via API call will be required for the VC to be issued.',
        example=True,
    )
    created_at: datetime = Field(
        ...,
        description='The date and time when the issue credential record was created.',
        example='2024-04-23T11:13:44.493848580Z',
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='The date and time when the issue credential record was last updated.',
    )
    role: Role1 = Field(
        ...,
        description='The role played by the Prism agent in the credential issuance flow.',
        example='Issuer',
    )
    protocol_state: ProtocolState = Field(
        ...,
        description='The current state of the issue credential protocol execution.',
        example='OfferPending',
    )
    credential: Optional[str] = Field(
        None,
        description='The base64-encoded verifiable credential, in JWT or AnonCreds format, that has been sent by the issuer.',
    )
    issuing_did: Optional[str] = Field(
        None,
        description='Issuer DID of the verifiable credential object.',
        example='did:prism:issuerofverifiablecredentials',
    )
    meta_retries: int = Field(
        ...,
        description='The maximum background processing attempts remaining for this record',
        example=5,
    )


class IssueCredentialRecordPage(BaseModel):
    # self: str = Field(
    #     ...,
    #     description='A string field containing the URL of the current API endpoint',
    #     example='/prism-agent/schema-registry/schemas?skip=10&limit=10',
    # )
    kind: str = Field(
        ...,
        description='A string field containing the URL of the current API endpoint',
        example='/prism-agent/schema-registry/schemas?skip=10&limit=10',
    )
    page_of: str = Field(
        ...,
        description='A string field indicating the type of resource that the contents field contains',
        example='/prism-agent/schema-registry/schemas',
    )
    next: Optional[str] = Field(
        None,
        description='An optional string field containing the URL of the next page of results. If the API response does not contain any more pages, this field should be set to None.',
        example='/prism-agent/schema-registry/schemas?skip=20&limit=10',
    )
    previous: Optional[str] = Field(
        None,
        description='An optional string field containing the URL of the previous page of results. If the API response is the first page of results, this field should be set to None.',
        example='/prism-agent/schema-registry/schemas?skip=0&limit=10',
    )
    contents: Optional[List[IssueCredentialRecord]] = Field(
        None,
        description='A sequence of IssueCredentialRecord objects representing the list of credential records that the API response contains',
        example=[],
    )


class ManagedDID(BaseModel):
    did: str = Field(
        ...,
        description='A managed DID',
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff',
    )
    longFormDid: Optional[str] = Field(
        None,
        description='A long-form DID. Mandatory when status is not PUBLISHED and optional when status is PUBLISHED',
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff:Cr4BCrsBElsKBmF1dGgtMRAEQk8KCXNlY3AyNTZrMRIg0opTuxu-zt6aRbT1tPniG4eu4CYsQPM3rrLzvzNiNgwaIIFTnyT2N4U7qCQ78qtWC3-p0el6Hvv8qxG5uuEw-WgMElwKB21hc3RlcjAQAUJPCglzZWNwMjU2azESIKhBU0eCOO6Vinz_8vhtFSAhYYqrkEXC8PHGxkuIUev8GiAydFHLXb7c22A1Uj_PR21NZp6BCDQqNq2xd244txRgsQ',
    )
    status: str = Field(
        ...,
        description='A status indicating a publication state of a DID in the wallet (e.g. PUBLICATION_PENDING, PUBLISHED).\nDoes not represent DID a full lifecyle (e.g. deactivated, recovered, updated).',
        example='CREATED',
    )


class ManagedDIDPage(BaseModel):
    # self: str
    kind: str
    page_of: str
    next: Optional[str] = None
    previous: Optional[str] = None
    contents: Optional[List[ManagedDID]] = None


# class MapString(BaseModel):
#     __root__: Optional[Dict[str, str]] = None


class Null(BaseModel):
    pass


class Num(BaseModel):
    value: float


class Obj(BaseModel):
    pass


class Options(BaseModel):
    challenge: str = Field(
        ...,
        description='The challenge should be a randomly generated string.',
        example='11c91493-01b3-4c4d-ac36-b336bab5bddf',
    )
    domain: str = Field(
        ...,
        description='The domain value can be any string or URI.',
        example='https://example-verifier.com',
    )


class PatchContextAction(BaseModel):
    contexts: Optional[List[str]] = None


class Role2(Enum):
    Verifier = 'Verifier'
    Prover = 'Prover'


class Status(Enum):
    RequestPending = 'RequestPending'
    RequestSent = 'RequestSent'
    RequestReceived = 'RequestReceived'
    RequestRejected = 'RequestRejected'
    PresentationPending = 'PresentationPending'
    PresentationGenerated = 'PresentationGenerated'
    PresentationSent = 'PresentationSent'
    PresentationReceived = 'PresentationReceived'
    PresentationVerified = 'PresentationVerified'
    PresentationAccepted = 'PresentationAccepted'
    PresentationRejected = 'PresentationRejected'
    ProblemReportPending = 'ProblemReportPending'
    ProblemReportSent = 'ProblemReportSent'
    ProblemReportReceived = 'ProblemReportReceived'


class Proof(BaseModel):
    type: str = Field(
        ...,
        description='The type of cryptographic signature algorithm used to generate the proof.',
        example='Ed25519Signature2018',
    )
    created: datetime = Field(
        ...,
        description='The date and time at which the proof was created, in UTC format. This field is used to ensure that the proof was generated before or at the same time as the credential definition itself.',
        example='2022-03-10T12:00Z',
    )
    verificationMethod: str = Field(
        ...,
        description='The verification method used to generate the proof. This is usually a DID and key ID combination that can be used to look up the public key needed to verify the proof.',
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff#key-1',
    )
    proofPurpose: str = Field(
        ...,
        description='The purpose of the proof (for example: `assertionMethod`). This indicates that the proof is being used to assert that the issuer really issued this credential definition instance.',
        example='assertionMethod',
    )
    proofValue: str = Field(
        ...,
        description='The cryptographic signature value that was generated using the private key associated with the verification method, and which can be used to verify the proof.',
        example='FiPfjknHikKmZ...',
    )
    jws: str = Field(
        ...,
        description='The JSON Web Signature (JWS) that contains the proof information.',
        example='eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il0sImt0eSI6Ik...',
    )
    domain: Optional[str] = Field(
        None,
        description='It specifies the domain context within which the credential definition and proof are being used',
        example='prims.atala.com',
    )


class Proof1(BaseModel):
    type: str = Field(
        ...,
        description='The type of cryptographic signature algorithm used to generate the proof.',
        example='Ed25519Signature2018',
    )
    created: datetime = Field(
        ...,
        description='The date and time at which the proof was created, in UTC format. This field is used to ensure that the proof was generated before or at the same time as the credential schema itself.',
        example='2022-03-10T12:00Z',
    )
    verificationMethod: str = Field(
        ...,
        description='The verification method used to generate the proof. This is usually a DID and key ID combination that can be used to look up the public key needed to verify the proof.',
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff#key-1',
    )
    proofPurpose: str = Field(
        ...,
        description='The purpose of the proof (for example: `assertionMethod`). This indicates that the proof is being used to assert that the issuer really issued this credential schema instance.',
        example='assertionMethod',
    )
    proofValue: str = Field(
        ...,
        description='The cryptographic signature value that was generated using the private key associated with the verification method, and which can be used to verify the proof.',
        example='FiPfjknHikKmZ...',
    )
    jws: str = Field(
        ...,
        description='The JSON Web Signature (JWS) that contains the proof information.',
        example='eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il0sImt0eSI6Ik...',
    )
    domain: Optional[str] = Field(
        None,
        description='It specifies the domain context within which the credential schema and proof are being used',
        example='prims.atala.com',
    )


class ProofRequestAux(BaseModel):
    schemaId: str = Field(
        ...,
        description='The unique identifier of a schema the VC should comply with.',
        example='https://schema.org/Person',
    )
    trustIssuers: Optional[List[str]] = Field(
        None,
        description='One or more issuers that are trusted by the verifier emitting the proof presentation request.',
        example=[
            'did:web:atalaprism.io/users/testUser',
            'did.prism:123',
            'did:prism:...',
        ],
    )


class PublicKeyJwk(BaseModel):
    crv: Optional[str] = None
    x: Optional[str] = None
    y: Optional[str] = None
    kty: str


class Purpose(Enum):
    assertionMethod = 'assertionMethod'
    authentication = 'authentication'
    capabilityDelegation = 'capabilityDelegation'
    capabilityInvocation = 'capabilityInvocation'
    keyAgreement = 'keyAgreement'


class RemoveEntryById(BaseModel):
    id: str


class Action(Enum):
    request_accept = 'request-accept'
    request_reject = 'request-reject'
    presentation_accept = 'presentation-accept'
    presentation_reject = 'presentation-reject'


class RequestPresentationAction(BaseModel):
    action: Action = Field(
        ...,
        description='The action to perform on the proof presentation record.',
        example='request-accept',
    )
    proofId: Optional[List[str]] = Field(
        None,
        description='The unique identifier of the issue credential record - and hence VC - to use as the prover accepts the presentation request. Only applicable on the prover side when the action is `request-accept`.',
    )


class RequestPresentationInput(BaseModel):
    connectionId: UUID = Field(
        ...,
        description='The unique identifier of an established connection between the verifier and the prover.',
        example='bc528dc8-69f1-4c5a-a508-5f8019047900',
    )
    options: Optional[Options] = None
    proofs: Optional[List[ProofRequestAux]] = Field(
        None,
        description='The type of proofs requested in the context of this proof presentation request (e.g., VC schema, trusted issuers, etc.)',
        example=[],
    )
    credentialFormat: Optional[str] = Field(
        None, description="The credential format (default to 'JWT')", example='JWT'
    )


class Str(BaseModel):
    value: str


class UpdateEntityNameRequest(BaseModel):
    name: constr(min_length=1, max_length=128) = Field(
        ..., description='New name of the entity', example='John Doe'
    )


class UpdateEntityWalletIdRequest(BaseModel):
    walletId: UUID = Field(
        ...,
        description='The walletId owned by the entity',
        example='00000000-0000-0000-0000-000000000000',
    )


class VerificationMethod(BaseModel):
    id: str = Field(
        ...,
        description='The identifier for the verification method.',
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff#key-1',
    )
    type: str = Field(
        ...,
        description='The type of the verification method.',
        example='JsonWebKey2020',
    )
    controller: str = Field(
        ...,
        description='The DID that controls the verification method.',
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff',
    )
    public_key_jwk: PublicKeyJwk


class VerificationPolicyConstraint(BaseModel):
    schemaId: str
    trustedIssuers: Optional[List[str]] = None


class VerificationPolicyInput(BaseModel):
    id: Optional[UUID] = None
    name: str
    description: str
    constraints: Optional[List[VerificationPolicyConstraint]] = None


class WalletDetail(BaseModel):
    id: UUID = Field(
        ..., description='A wallet ID', example='00000000-0000-0000-0000-000000000000'
    )
    name: str = Field(..., description='The name of the wallet', example='my-wallet-1')
    created_at: datetime = Field(
        ...,
        description='The `createdAt` timestamp of the wallet.',
        example='2023-01-01T00:00:00Z',
    )
    updated_at: datetime = Field(
        ...,
        description='The `updateddAt` timestamp of the wallet.',
        example='2023-01-01T00:00:00Z',
    )


class WalletDetailPage(BaseModel):
    kind: str
    page_of: str
    next: Optional[str] = None
    previous: Optional[str] = None
    contents: Optional[List[WalletDetail]] = None


class WebhookNotification(BaseModel):
    id: UUID = Field(
        ...,
        description='ID of webhook notification resource',
        example='00000000-0000-0000-0000-000000000000',
    )
    url: str = Field(
        ...,
        description='A URL of webhook for event notification',
        example='http://example.com',
    )
    custom_headers: MapString
    created_at: datetime = Field(
        ...,
        description='A time which the webhook notification resource was created.',
        example='1970-01-01T00:00:00Z',
    )


class WebhookNotificationPage(BaseModel):
    self: str
    kind: str
    pageOf: str
    next: Optional[str] = None
    previous: Optional[str] = None
    contents: Optional[List[WebhookNotification]] = None


class Connection(BaseModel):
    connection_id: UUID = Field(
        ...,
        description='The unique identifier of the connection.',
        example='0527aea1-d131-3948-a34d-03af39aba8b4',
    )
    thid: str = Field(
        ...,
        description='The unique identifier of the thread this connection record belongs to. The value will identical on both sides of the connection (inviter and invitee)',
        example='0527aea1-d131-3948-a34d-03af39aba8b4',
    )
    label: Optional[str] = Field(
        None, description='A human readable alias for the connection.', example='Peter'
    )
    my_did: Optional[str] = Field(
        None,
        description='The DID representing me as the inviter or invitee in this specific connection.',
        example='did:peer:12345',
    )
    their_did: Optional[str] = Field(
        None,
        description='The DID representing the other peer as the an inviter or invitee in this specific connection.',
        example='did:peer:67890',
    )
    role: Role = Field(
        ...,
        description='The role played by the Prism agent in the connection flow.',
        example='Inviter',
    )
    state: State = Field(
        ...,
        description='The current state of the connection protocol execution.',
        example='InvitationGenerated',
    )
    invitation: ConnectionInvitation
    created_at: datetime = Field(
        ...,
        description='The date and time the connection record was created.',
        example='2022-03-10T12:00Z',
    )
    updated_at: Optional[datetime] = Field(
        None,
        description='The date and time the connection record was last updated.',
        example='2022-03-10T12:00Z',
    )
    meta_retries: int = Field(
        ...,
        description='The maximum background processing attempts remaining for this record',
        example=5,
    )
    # self: str = Field(
    #     ...,
    #     description='The reference to the connection resource.',
    #     example='https://atala-prism-products.io/connections/ABCD-1234',
    # )
    kind: str = Field(
        ...,
        description='The type of object returned. In this case a `Connection`.',
        example='Connection',
    )


class ConnectionsPage(BaseModel):
    contents: Optional[List[Connection]] = Field(None, description='', example=[])
    kind: str = Field(..., description='', example='ConnectionsPage')
    # self: str = Field(
    #     ..., description='', example='/prism-agent/connections?offset=10&limit=10'
    # )
    page_of: str = Field(..., description='', example='')
    next: Optional[str] = Field(
        None, description='', example='/prism-agent/connections?offset=20&limit=10'
    )
    previous: Optional[str] = Field(
        None, description='', example='/prism-agent/connections?offset=0&limit=10'
    )


class CreateWebhookNotification(BaseModel):
    url: str
    customHeaders: Optional[MapString] = None


class CredentialDefinitionResponse(BaseModel):
    guid: UUID = Field(
        ...,
        description="Globally unique id of the credential definition.It's composed from the bytes of the string that contain the `author`, `name`, and `version` values.The string format looks like the resource identifier: `author`/`id`?version=`version`",
        example='0527aea1-d131-3948-a34d-03af39aba8b4',
    )
    id: str = Field(
        ...,
        description='A locally unique identifier to address the credential definition. UUID is generated by the backend.',
        example='0527aea1-d131-3948-a34d-03af39aba8b5',
    )
    longId: Optional[str] = Field(
        None,
        description="Resource id of the credential definition. Contains the `author`'s DID, `id` and `version` fields.",
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff/0527aea1-d131-3948-a34d-03af39aba8b4?version=1.0.0',
    )
    name: str = Field(
        ...,
        description='A human-readable name for the credential definition. A piece of Metadata.',
        example='DrivingLicense',
    )
    version: str = Field(
        ...,
        description='Denotes the revision of a given Credential Definition. It should follow semantic version convention to describe the impact of the credential definition evolution.',
        example='1.0.0',
    )
    tag: str = Field(
        ...,
        description='Token that allow to lookup and filter the credential definition records.',
        example='licence',
    )
    description: str = Field(
        ...,
        description='A human-readable description of the credential definition',
        example='Simple credential definition for the driving licence verifiable credential.',
    )
    author: str = Field(
        ...,
        description='DID of the identity which authored the credential definition. A piece of Metadata.',
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff',
    )
    authored: datetime = Field(
        ...,
        description='[RFC3339](https://www.rfc-editor.org/rfc/rfc3339) date on which the credential definition was created. A piece of Metadata.',
        example='2022-03-10T12:00Z',
    )
    schemaId: str = Field(
        ...,
        description='The unique identifier of the schema used for this credential definition.',
        example='https://agent-host.com/prism-agent/schema-registry/schemas/d9569cec-c81e-4779-aa86-0d5994d82676',
    )
    definition: Any = Field(
        ...,
        description='Definition object that represents the actual definition of the credential.',
        example={
            'credentialSubject': {
                'emailAddress': 'alice@wonderland.com',
                'givenName': 'Alice',
                'familyName': 'Wonderland',
                'dateOfIssuance': '2000-01-01T10:00:00Z',
                'drivingLicenseID': '12345',
                'drivingClass': 5,
            }
        },
    )
    keyCorrectnessProof: Any = Field(
        ...,
        description='A proof that validates the correctness of the key within the context of the credential definition.',
    )
    signatureType: str = Field(
        ...,
        description='Signature type used in the CredentialDefinition.',
        example='CL',
    )
    supportRevocation: bool = Field(
        ...,
        description='Boolean flag indicating whether revocation is supported for this CredentialDefinition.',
        example=False,
    )
    proof: Optional[Proof] = None
    kind: str = Field(
        ...,
        description='A string that identifies the type of resource being returned in the response.',
        example='CredentialDefinition',
    )
    self: str = Field(
        ...,
        description='The URL that uniquely identifies the resource being returned in the response.',
        example='/prism-agent/credential-definition-registry/schemas/0527aea1-d131-3948-a34d-03af39aba8b4',
    )


class CredentialDefinitionResponsePage(BaseModel):
    contents: Optional[List[CredentialDefinitionResponse]] = Field(
        None,
        description='A sequence of CredentialSchemaResponse objects representing the list of credential schemas that the API response contains',
        example=[],
    )
    kind: str = Field(
        ...,
        description='A string field indicating the type of the API response. In this case, it will always be set to `CredentialSchemaPage`',
        example='CredentialSchemaPage',
    )
    self: str = Field(
        ...,
        description='A string field containing the URL of the current API endpoint',
        example='/prism-agent/schema-registry/schemas?skip=10&limit=10',
    )
    pageOf: str = Field(
        ...,
        description='A string field indicating the type of resource that the contents field contains',
        example='/prism-agent/schema-registry/schemas',
    )
    next: Optional[str] = Field(
        None,
        description='An optional string field containing the URL of the next page of results. If the API response does not contain any more pages, this field should be set to None.',
        example='/prism-agent/schema-registry/schemas?skip=20&limit=10',
    )
    previous: Optional[str] = Field(
        None,
        description='An optional string field containing the URL of the previous page of results. If the API response is the first page of results, this field should be set to None.',
        example='/prism-agent/schema-registry/schemas?skip=0&limit=10',
    )


class CredentialSchemaResponse(BaseModel):
    guid: UUID = Field(
        ...,
        description="Globally unique id of the credential schema.It's composed from the bytes of the string that contain the `author`, `name`, and `version` values.The string format looks like the resource identifier: `author`/`id`?version=`version`",
        example='0527aea1-d131-3948-a34d-03af39aba8b4',
    )
    id: str = Field(
        ...,
        description='A locally unique identifier to address the schema. UUID is generated by the backend.',
        example='0527aea1-d131-3948-a34d-03af39aba8b5',
    )
    long_id: Optional[str] = Field(
        None,
        description="Resource id of the credential schema. Contains the `author`'s DID, `id` and `version` fields.",
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff/0527aea1-d131-3948-a34d-03af39aba8b4?version=1.0.0',
    )
    name: str = Field(
        ...,
        description='A human-readable name for the credential schema. A piece of Metadata.',
        example='DrivingLicense',
    )
    version: str = Field(
        ...,
        description='Denotes the revision of a given Credential Schema. It should follow semantic version convention to describe the impact of the schema evolution.',
        example='1.0.0',
    )
    tags: Optional[List[str]] = Field(
        None,
        description='Tokens that allow to lookup and filter the credential schema records.',
        example=['driving', 'licence', 'id'],
    )
    description: str = Field(
        ...,
        description='A human-readable description of the credential schema',
        example='Simple credential schema for the driving licence verifiable credential.',
    )
    type: str = Field(
        ...,
        description='This field resolves to a JSON schema with details about the schema metadata that applies to the schema. A piece of Metadata.',
        example='https://w3c-ccg.github.io/vc-json-schemas/schema/2.0/schema.json',
    )
    schema_: Any = Field(
        ...,
        alias='schema',
        description='Valid JSON Schema where the Credential Schema data fields are defined. A piece of Metadata',
        example={
            '$id': 'https://example.com/driving-license-1.0',
            '$schema': 'https://json-schema.org/draft/2020-12/schema',
            'description': 'Driving License',
            'type': 'object',
            'properties': {
                'emailAddress': {'type': 'string', 'format': 'email'},
                'givenName': {'type': 'string'},
                'familyName': {'type': 'string'},
                'dateOfIssuance': {'type': 'string', 'format': 'date-time'},
                'drivingLicenseID': {'type': 'string'},
                'drivingClass': {'type': 'integer'},
            },
            'required': [
                'emailAddress',
                'familyName',
                'dateOfIssuance',
                'drivingLicenseID',
                'drivingClass',
            ],
            'additionalProperties': False,
        },
    )
    author: str = Field(
        ...,
        description='DID of the identity which authored the credential schema. A piece of Metadata.',
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff',
    )
    authored: datetime = Field(
        ...,
        description='[RFC3339](https://www.rfc-editor.org/rfc/rfc3339) date on which the credential schema was created. A piece of Metadata.',
        example='2022-03-10T12:00Z',
    )
    proof: Optional[Proof1] = None
    kind: str = Field(
        ...,
        description='A string that identifies the type of resource being returned in the response.',
        example='CredentialSchema',
    )
    # self: str = Field(
    #     ...,
    #     description='The URL that uniquely identifies the resource being returned in the response.',
    #     example='/prism-agent/schema-registry/schemas/0527aea1-d131-3948-a34d-03af39aba8b4',
    # )


class CredentialSchemaResponsePage(BaseModel):
    contents: Optional[List[CredentialSchemaResponse]] = Field(
        None,
        description='A sequence of CredentialSchemaResponse objects representing the list of credential schemas that the API response contains',
        example=[],
    )
    kind: str = Field(
        ...,
        description='A string field indicating the type of the API response. In this case, it will always be set to `CredentialSchemaPage`',
        example='CredentialSchemaPage',
    )
    self: str = Field(
        ...,
        description='A string field containing the URL of the current API endpoint',
        example='/prism-agent/schema-registry/schemas?skip=10&limit=10',
    )
    pageOf: str = Field(
        ...,
        description='A string field indicating the type of resource that the contents field contains',
        example='/prism-agent/schema-registry/schemas',
    )
    next: Optional[str] = Field(
        None,
        description='An optional string field containing the URL of the next page of results. If the API response does not contain any more pages, this field should be set to None.',
        example='/prism-agent/schema-registry/schemas?skip=20&limit=10',
    )
    previous: Optional[str] = Field(
        None,
        description='An optional string field containing the URL of the previous page of results. If the API response is the first page of results, this field should be set to None.',
        example='/prism-agent/schema-registry/schemas?skip=0&limit=10',
    )


class DIDOperationResponse(BaseModel):
    scheduledOperation: DidOperationSubmission


# class Json(BaseModel):
#     __root__: Union[Arr, Bool, Null, Num, Obj, Str] = Field(
#         ...,
#         description='The service endpoint. Can contain multiple possible values as described in the [Create DID operation]',
#         example='https://example.com',
#     )


class ManagedDIDKeyTemplate(BaseModel):
    id: str = Field(
        ...,
        description='Identifier of a verification material in the DID Document',
        example='key-1',
    )
    purpose: Purpose


class PresentationStatus(BaseModel):
    presentation_id: str = Field(
        ...,
        description='The unique identifier of the presentation record.',
        example='3c6d9fa5-d277-431e-a6cb-d3956e47e610',
    )
    thid: str = Field(
        ...,
        description='The unique identifier of the thread this presentation record belongs to. The value will identical on both sides of the presentation flow (verifier and prover)',
        example='0527aea1-d131-3948-a34d-03af39aba8b4',
    )
    role: Role2 = Field(
        ...,
        description='The role played by the Prism agent in the proof presentation flow.',
        example='Verifier',
    )
    status: Status = Field(
        ...,
        description='The current state of the proof presentation record.',
        example='RequestPending',
    )
    proofs: Optional[List[ProofRequestAux]] = Field(
        None,
        description='The type of proofs requested in the context of this proof presentation request (e.g., VC schema, trusted issuers, etc.)',
        example=[],
    )
    data: Optional[List[str]] = Field(
        None,
        description='The list of proofs presented by the prover to the verifier.',
        example=[],
    )
    connection_id: Optional[str] = Field(
        None,
        description='The unique identifier of an established connection between the verifier and the prover.',
        example='bc528dc8-69f1-4c5a-a508-5f8019047900',
    )
    meta_retries: int = Field(
        ...,
        description='The maximum background processing attempts remaining for this record',
        example=5,
    )


class PresentationStatusPage(BaseModel):
    contents: Optional[List[PresentationStatus]] = Field(
        None, description='A sequence of Presentation objects.', example=[]
    )
    # self: str = Field(
    #     ...,
    #     description='The reference to the presentation collection itself.',
    #     example='/present-proof/presentations',
    # )
    kind: str = Field(
        ...,
        description='The type of object returned. In this case a `Collection`.',
        example='Collection',
    )
    page_of: str = Field(
        ...,
        description='Page number within the context of paginated response.',
        example=1,
    )
    next: Optional[str] = Field(
        None, description='URL of the next page (if available)', example=''
    )
    previous: Optional[str] = Field(
        None, description='URL of the previous page (if available)', example=''
    )


class Service(BaseModel):
    id: str = Field(
        ...,
        description='The id of the service.\nRequires a URI fragment when use in create / update DID.\nReturns the full ID (with DID prefix) when resolving DID',
        example='service-1',
    )
    type: Union[List[str], str] = Field(
        ...,
        description='Service type. Can contain multiple possible values as described in the [Create DID operation](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#create-did) under the construction section.',
        example='Single(LinkedDomains)',
    )
    serviceEndpoint: Any


class UpdateManagedDIDServiceAction(BaseModel):
    id: str = Field(
        ..., description='The id of the service to update', example='service-1'
    )
    type: Optional[Union[List[str], str]] = Field(
        None, description='The type of the service', example='LinkedDomains'
    )
    serviceEndpoint: Optional[Any] = None


class VerificationPolicy(BaseModel):
    self: str
    kind: str
    id: UUID
    nonce: int
    name: str
    description: str
    createdAt: datetime
    updatedAt: datetime
    constraints: Optional[List[VerificationPolicyConstraint]] = None


class VerificationPolicyPage(BaseModel):
    self: str
    kind: str
    pageOf: str
    next: Optional[str] = None
    previous: Optional[str] = None
    contents: Optional[List[VerificationPolicy]] = None


class CreateManagedDidRequestDocumentTemplate(BaseModel):
    publicKeys: Optional[List[ManagedDIDKeyTemplate]] = None
    services: Optional[List[Service]] = None
    contexts: Optional[List[str]] = None


class DIDDocument(BaseModel):
    # field_context: Optional[List[str]] = Field(
    #     None,
    #     # alias='@context',
    #     description='The JSON-LD context for the DID resolution result.',
    # )
    id: str = Field(
        ...,
        description='[DID subject](https://www.w3.org/TR/did-core/#did-subject).\nThe value must match the DID that was given to the resolver.',
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff',
    )
    controller: Optional[str] = Field(
        None,
        description='[DID controller](https://www.w3.org/TR/did-core/#did-controller)',
        example='did:prism:4a5b5cf0a513e83b598bbea25cd6196746747f361a73ef77068268bc9bd732ff',
    )
    verification_method: Optional[List[VerificationMethod]] = None
    authentication: Optional[List[str]] = None
    assertion_method: Optional[List[str]] = None
    key_agreement: Optional[List[str]] = None
    capability_invocation: Optional[List[str]] = None
    capability_delegation: Optional[List[str]] = None
    service: Optional[List[Service]] = None


class DIDResolutionResult(BaseModel):
    # field_context: str = Field(
    #     ...,
    #     # alias='@context',
    #     description='The JSON-LD context for the DID resolution result.',
    #     example='https://w3id.org/did-resolution/v1',
    # )
    did_document: Optional[DIDDocument] = None
    did_document_metadata: DIDDocumentMetadata
    # didR_resolution_metadata: DIDResolutionMetadata


class UpdateManagedDIDRequestAction(BaseModel):
    actionType: ActionType
    addKey: Optional[ManagedDIDKeyTemplate] = None
    removeKey: Optional[RemoveEntryById] = None
    addService: Optional[Service] = None
    removeService: Optional[RemoveEntryById] = None
    updateService: Optional[UpdateManagedDIDServiceAction] = None
    patchContext: Optional[PatchContextAction] = None


class CreateManagedDidRequest(BaseModel):
    documentTemplate: CreateManagedDidRequestDocumentTemplate


class UpdateManagedDIDRequest(BaseModel):
    actions: Optional[List[UpdateManagedDIDRequestAction]] = None


# response = {
#             "userId": entityRes.id,
#             "walletId": walletRes.id,
#             "did": didRes.long_form_did,
#             "userApiKey": userApiKey
#         }
class EntityCreated(BaseModel):
    userId: str = Field(
        ...,
        description='ID of the new entity.',
        example='180ebf7b-d49f-4910-92b8-3aaea4ee5a3e',
    )
    walletId: str = Field(
        ...,
        description='Wallet ID of the new entity.',
        example='ffcec57e-4821-4565-9479-5d91cd25b522',
    )
    did: str = Field(
        ...,
        description='New prism did of the new entity.',
        example='did:prism:027dbb710f7c3f3301b0e387a40d2e13a8c46edbba63e4fca190987f1182b2ca:CnsKeRI6CgZhdXRoLTEQBEouCglzZWNwMjU2azESIQLhK1MWHE_qDN70ZVGz-d5oglBctpZaekrTiUeNYPcV0BI7CgdtYXN0ZXIwEAFKLgoJc2VjcDI1NmsxEiED8PxAsrLfOJSpNxF1lWBMa6DkYoANOvB-J6uQXs4Qp_Y',
    )
    userApiKey: str = Field(
        ...,
        description='API key of the new entity.',
        example='user.wgTLw6hlclMBb7aNLFIQ0xw3fCxvmPR1',
    )
