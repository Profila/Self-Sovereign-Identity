# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DIDRegistrarApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_did_registrar_dids(self, **kwargs):  # noqa: E501
        """List all DIDs stored in the agent's wallet  # noqa: E501

        List all DIDs stored in the agent's wallet. Return a paginated items ordered by created timestamp.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_did_registrar_dids(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The number of items to skip before returning results. Default is 0 if not specified.
        :param int limit: The maximum number of items to return. Defaults to 100 if not specified.
        :return: ManagedDIDPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_did_registrar_dids_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_did_registrar_dids_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_did_registrar_dids_with_http_info(self, **kwargs):  # noqa: E501
        """List all DIDs stored in the agent's wallet  # noqa: E501

        List all DIDs stored in the agent's wallet. Return a paginated items ordered by created timestamp.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_did_registrar_dids_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The number of items to skip before returning results. Default is 0 if not specified.
        :param int limit: The maximum number of items to return. Defaults to 100 if not specified.
        :return: ManagedDIDPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_did_registrar_dids" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth', 'jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/did-registrar/dids', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManagedDIDPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_did_registrar_dids_didref(self, did_ref, **kwargs):  # noqa: E501
        """Get a specific DID stored in the agent's wallet  # noqa: E501

        Get a specific DID stored in the agent's wallet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_did_registrar_dids_didref(did_ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did_ref: Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax) (required)
        :return: ManagedDID
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_did_registrar_dids_didref_with_http_info(did_ref, **kwargs)  # noqa: E501
        else:
            (data) = self.get_did_registrar_dids_didref_with_http_info(did_ref, **kwargs)  # noqa: E501
            return data

    def get_did_registrar_dids_didref_with_http_info(self, did_ref, **kwargs):  # noqa: E501
        """Get a specific DID stored in the agent's wallet  # noqa: E501

        Get a specific DID stored in the agent's wallet  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_did_registrar_dids_didref_with_http_info(did_ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did_ref: Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax) (required)
        :return: ManagedDID
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did_ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_did_registrar_dids_didref" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did_ref' is set
        if ('did_ref' not in params or
                params['did_ref'] is None):
            raise ValueError("Missing the required parameter `did_ref` when calling `get_did_registrar_dids_didref`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did_ref' in params:
            path_params['didRef'] = params['did_ref']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth', 'jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/did-registrar/dids/{didRef}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ManagedDID',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_did_registrar_dids(self, body, **kwargs):  # noqa: E501
        """Create an unpublished PRISM DID and store it in the agent's wallet  # noqa: E501

        Create an unpublished PRISM DID and store it in the agent's wallet. The public/private keys of the DID will be derived according to the `didDocumentTemplate` and managed by the agent. The DID can later be published to the VDR using the `publications` endpoint. After the DID is created, it has the `CREATED` status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_did_registrar_dids(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateManagedDidRequest body: (required)
        :return: CreateManagedDIDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_did_registrar_dids_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_did_registrar_dids_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_did_registrar_dids_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create an unpublished PRISM DID and store it in the agent's wallet  # noqa: E501

        Create an unpublished PRISM DID and store it in the agent's wallet. The public/private keys of the DID will be derived according to the `didDocumentTemplate` and managed by the agent. The DID can later be published to the VDR using the `publications` endpoint. After the DID is created, it has the `CREATED` status.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_did_registrar_dids_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateManagedDidRequest body: (required)
        :return: CreateManagedDIDResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_did_registrar_dids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_did_registrar_dids`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth', 'jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/did-registrar/dids', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreateManagedDIDResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_did_registrar_dids_didref_deactivations(self, did_ref, **kwargs):  # noqa: E501
        """Deactivate DID in the agent's wallet and post deactivate operation to the VDR  # noqa: E501

        Deactivate DID in the agent's wallet and post deactivate operation to the VDR. Only the DID with status `PUBLISHED` can be deactivated. The deactivate operation is asynchornous operation and the agent will reject a new deactivate request if the previous operation is not yet comfirmed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_did_registrar_dids_didref_deactivations(did_ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did_ref: Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax) (required)
        :return: DIDOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_did_registrar_dids_didref_deactivations_with_http_info(did_ref, **kwargs)  # noqa: E501
        else:
            (data) = self.post_did_registrar_dids_didref_deactivations_with_http_info(did_ref, **kwargs)  # noqa: E501
            return data

    def post_did_registrar_dids_didref_deactivations_with_http_info(self, did_ref, **kwargs):  # noqa: E501
        """Deactivate DID in the agent's wallet and post deactivate operation to the VDR  # noqa: E501

        Deactivate DID in the agent's wallet and post deactivate operation to the VDR. Only the DID with status `PUBLISHED` can be deactivated. The deactivate operation is asynchornous operation and the agent will reject a new deactivate request if the previous operation is not yet comfirmed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_did_registrar_dids_didref_deactivations_with_http_info(did_ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did_ref: Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax) (required)
        :return: DIDOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did_ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_did_registrar_dids_didref_deactivations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did_ref' is set
        if ('did_ref' not in params or
                params['did_ref'] is None):
            raise ValueError("Missing the required parameter `did_ref` when calling `post_did_registrar_dids_didref_deactivations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did_ref' in params:
            path_params['didRef'] = params['did_ref']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth', 'jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/did-registrar/dids/{didRef}/deactivations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DIDOperationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_did_registrar_dids_didref_publications(self, did_ref, **kwargs):  # noqa: E501
        """Publish the DID stored in the agent's wallet to the VDR  # noqa: E501

        Initiate the publication of the DID stored in the agent's wallet to the VDR. The publishing process is asynchronous. Attempting to publish the same DID while the previous publication is ongoing will not initiate another publication. After the submission of the DID publication, its status is changed to `PUBLICATION_PENDING`. Upon confirmation after a predefined number of blocks, the status is changed to `PUBLISHED`. In case of a failed DID publication, the status is reverted to `CREATED`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_did_registrar_dids_didref_publications(did_ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did_ref: Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax) (required)
        :return: DIDOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_did_registrar_dids_didref_publications_with_http_info(did_ref, **kwargs)  # noqa: E501
        else:
            (data) = self.post_did_registrar_dids_didref_publications_with_http_info(did_ref, **kwargs)  # noqa: E501
            return data

    def post_did_registrar_dids_didref_publications_with_http_info(self, did_ref, **kwargs):  # noqa: E501
        """Publish the DID stored in the agent's wallet to the VDR  # noqa: E501

        Initiate the publication of the DID stored in the agent's wallet to the VDR. The publishing process is asynchronous. Attempting to publish the same DID while the previous publication is ongoing will not initiate another publication. After the submission of the DID publication, its status is changed to `PUBLICATION_PENDING`. Upon confirmation after a predefined number of blocks, the status is changed to `PUBLISHED`. In case of a failed DID publication, the status is reverted to `CREATED`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_did_registrar_dids_didref_publications_with_http_info(did_ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str did_ref: Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax) (required)
        :return: DIDOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did_ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_did_registrar_dids_didref_publications" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did_ref' is set
        if ('did_ref' not in params or
                params['did_ref'] is None):
            raise ValueError("Missing the required parameter `did_ref` when calling `post_did_registrar_dids_didref_publications`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did_ref' in params:
            path_params['didRef'] = params['did_ref']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth', 'jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/did-registrar/dids/{didRef}/publications', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DIDOperationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_did_registrar_dids_didref_updates(self, body, did_ref, **kwargs):  # noqa: E501
        """Update DID in the agent's wallet and post update operation to the VDR  # noqa: E501

        Update DID in the agent's wallet and post the update operation to the VDR. Only the DID with status `PUBLISHED` can be updated. This endpoint updates the DID document from the last confirmed operation. The update operation is asynchornous operation and the agent will reject a new update request if the previous operation is not yet comfirmed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_did_registrar_dids_didref_updates(body, did_ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateManagedDIDRequest body: (required)
        :param str did_ref: Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax) (required)
        :return: DIDOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_did_registrar_dids_didref_updates_with_http_info(body, did_ref, **kwargs)  # noqa: E501
        else:
            (data) = self.post_did_registrar_dids_didref_updates_with_http_info(body, did_ref, **kwargs)  # noqa: E501
            return data

    def post_did_registrar_dids_didref_updates_with_http_info(self, body, did_ref, **kwargs):  # noqa: E501
        """Update DID in the agent's wallet and post update operation to the VDR  # noqa: E501

        Update DID in the agent's wallet and post the update operation to the VDR. Only the DID with status `PUBLISHED` can be updated. This endpoint updates the DID document from the last confirmed operation. The update operation is asynchornous operation and the agent will reject a new update request if the previous operation is not yet comfirmed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_did_registrar_dids_didref_updates_with_http_info(body, did_ref, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateManagedDIDRequest body: (required)
        :param str did_ref: Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax) (required)
        :return: DIDOperationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'did_ref']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_did_registrar_dids_didref_updates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_did_registrar_dids_didref_updates`")  # noqa: E501
        # verify the required parameter 'did_ref' is set
        if ('did_ref' not in params or
                params['did_ref'] is None):
            raise ValueError("Missing the required parameter `did_ref` when calling `post_did_registrar_dids_didref_updates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did_ref' in params:
            path_params['didRef'] = params['did_ref']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth', 'jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/did-registrar/dids/{didRef}/updates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DIDOperationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
