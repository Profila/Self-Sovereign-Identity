# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class IssueCredentialsProtocolApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def accept_credential_offer(self, body, record_id, **kwargs):  # noqa: E501
        """As a holder, accept a new credential offer received from another issuer Agent.  # noqa: E501

         As a holder, accept a new credential offer received from an issuer Agent. The subsequent credential request message sent to the issuer adheres to the [Issue Credential Protocol 3.0 - Request Credential](https://github.com/decentralized-identity/waci-didcomm/tree/main/issue_credential#request-credential) specification.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accept_credential_offer(body, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AcceptCredentialOfferRequest body: The accept credential offer request object. (required)
        :param str record_id: The `recordId` uniquely identifying the issue credential flow record. (required)
        :return: IssueCredentialRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.accept_credential_offer_with_http_info(body, record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.accept_credential_offer_with_http_info(body, record_id, **kwargs)  # noqa: E501
            return data

    def accept_credential_offer_with_http_info(self, body, record_id, **kwargs):  # noqa: E501
        """As a holder, accept a new credential offer received from another issuer Agent.  # noqa: E501

         As a holder, accept a new credential offer received from an issuer Agent. The subsequent credential request message sent to the issuer adheres to the [Issue Credential Protocol 3.0 - Request Credential](https://github.com/decentralized-identity/waci-didcomm/tree/main/issue_credential#request-credential) specification.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.accept_credential_offer_with_http_info(body, record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AcceptCredentialOfferRequest body: The accept credential offer request object. (required)
        :param str record_id: The `recordId` uniquely identifying the issue credential flow record. (required)
        :return: IssueCredentialRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method accept_credential_offer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `accept_credential_offer`")  # noqa: E501
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `accept_credential_offer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth', 'jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/issue-credentials/records/{recordId}/accept-offer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IssueCredentialRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_credential_offer(self, body, **kwargs):  # noqa: E501
        """As a credential issuer, create a new credential offer that will be sent to a holder Agent.  # noqa: E501

         Creates a new credential offer that will be delivered, through a previously established DIDComm connection, to a holder Agent. The subsequent credential offer message adheres to the [Issue Credential Protocol 3.0 - Offer Credential](https://github.com/decentralized-identity/waci-didcomm/tree/main/issue_credential#offer-credential) specification. The created offer can be of two types: 'JWT' or 'AnonCreds'.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_credential_offer(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateIssueCredentialRecordRequest body: The credential offer object. (required)
        :return: IssueCredentialRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_credential_offer_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_credential_offer_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_credential_offer_with_http_info(self, body, **kwargs):  # noqa: E501
        """As a credential issuer, create a new credential offer that will be sent to a holder Agent.  # noqa: E501

         Creates a new credential offer that will be delivered, through a previously established DIDComm connection, to a holder Agent. The subsequent credential offer message adheres to the [Issue Credential Protocol 3.0 - Offer Credential](https://github.com/decentralized-identity/waci-didcomm/tree/main/issue_credential#offer-credential) specification. The created offer can be of two types: 'JWT' or 'AnonCreds'.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_credential_offer_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateIssueCredentialRecordRequest body: The credential offer object. (required)
        :return: IssueCredentialRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_credential_offer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_credential_offer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth', 'jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/issue-credentials/credential-offers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IssueCredentialRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_credential_record(self, record_id, **kwargs):  # noqa: E501
        """Retrieves a specific issue credential flow record from the Agent's database based on its unique `recordId`.  # noqa: E501

         Retrieves a specific issue credential flow record from the Agent's database based on its unique `recordId`. The API returns a comprehensive collection of issue credential flow records within the system, regardless of their state. The returned items include essential metadata such as record ID, thread ID, state, role, issued credential, and other relevant details.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credential_record(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: The `recordId` uniquely identifying the issue credential flow record. (required)
        :return: IssueCredentialRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_credential_record_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_credential_record_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def get_credential_record_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """Retrieves a specific issue credential flow record from the Agent's database based on its unique `recordId`.  # noqa: E501

         Retrieves a specific issue credential flow record from the Agent's database based on its unique `recordId`. The API returns a comprehensive collection of issue credential flow records within the system, regardless of their state. The returned items include essential metadata such as record ID, thread ID, state, role, issued credential, and other relevant details.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credential_record_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: The `recordId` uniquely identifying the issue credential flow record. (required)
        :return: IssueCredentialRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credential_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `get_credential_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth', 'jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/issue-credentials/records/{recordId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IssueCredentialRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_credential_records(self, **kwargs):  # noqa: E501
        """Retrieves the list of issue credential records from the Agent's database.  # noqa: E501

         Retrieves the list of issue credential records from the Agent's database. The API returns a comprehensive collection of issue credential flow records within the system, regardless of their state. The returned items include essential metadata such as record ID, thread ID, state, role, issued credential, and other relevant details.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credential_records(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The number of items to skip before returning results. Default is 0 if not specified.
        :param int limit: The maximum number of items to return. Defaults to 100 if not specified.
        :param str thid: The thread ID associated with a specific credential issue flow execution.
        :return: IssueCredentialRecordPage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_credential_records_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_credential_records_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_credential_records_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the list of issue credential records from the Agent's database.  # noqa: E501

         Retrieves the list of issue credential records from the Agent's database. The API returns a comprehensive collection of issue credential flow records within the system, regardless of their state. The returned items include essential metadata such as record ID, thread ID, state, role, issued credential, and other relevant details.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_credential_records_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int offset: The number of items to skip before returning results. Default is 0 if not specified.
        :param int limit: The maximum number of items to return. Defaults to 100 if not specified.
        :param str thid: The thread ID associated with a specific credential issue flow execution.
        :return: IssueCredentialRecordPage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'limit', 'thid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_credential_records" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'thid' in params:
            query_params.append(('thid', params['thid']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth', 'jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/issue-credentials/records', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IssueCredentialRecordPage',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def issue_credential(self, record_id, **kwargs):  # noqa: E501
        """As an issuer, issues the verifiable credential related the identified issuance flow record.  # noqa: E501

         As an issuer, issues the verifiable credential related the identified issuance flow record. The JWT or AnonCreds credential will be generated and sent to the holder Agent asynchronously and through DIDComm. Note that this endpoint should only be called when automatic issuance is disabled for this record (i.e. `automaticIssuance` attribute set to `false` at offer creation time).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.issue_credential(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: The `recordId` uniquely identifying the issue credential flow record. (required)
        :return: IssueCredentialRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.issue_credential_with_http_info(record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.issue_credential_with_http_info(record_id, **kwargs)  # noqa: E501
            return data

    def issue_credential_with_http_info(self, record_id, **kwargs):  # noqa: E501
        """As an issuer, issues the verifiable credential related the identified issuance flow record.  # noqa: E501

         As an issuer, issues the verifiable credential related the identified issuance flow record. The JWT or AnonCreds credential will be generated and sent to the holder Agent asynchronously and through DIDComm. Note that this endpoint should only be called when automatic issuance is disabled for this record (i.e. `automaticIssuance` attribute set to `false` at offer creation time).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.issue_credential_with_http_info(record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str record_id: The `recordId` uniquely identifying the issue credential flow record. (required)
        :return: IssueCredentialRecord
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method issue_credential" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'record_id' is set
        if ('record_id' not in params or
                params['record_id'] is None):
            raise ValueError("Missing the required parameter `record_id` when calling `issue_credential`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'record_id' in params:
            path_params['recordId'] = params['record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKeyAuth', 'jwtAuth']  # noqa: E501

        return self.api_client.call_api(
            '/issue-credentials/records/{recordId}/issue-credential', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IssueCredentialRecord',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
