# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CredentialSchemaResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'id': 'str',
        'long_id': 'str',
        'name': 'str',
        'version': 'str',
        'tags': 'list[str]',
        'description': 'str',
        'type': 'str',
        'schema': 'object',
        'author': 'str',
        'authored': 'datetime',
        'proof': 'Proof1',
        'kind': 'str',
        '_self': 'str'
    }

    attribute_map = {
        'guid': 'guid',
        'id': 'id',
        'long_id': 'longId',
        'name': 'name',
        'version': 'version',
        'tags': 'tags',
        'description': 'description',
        'type': 'type',
        'schema': 'schema',
        'author': 'author',
        'authored': 'authored',
        'proof': 'proof',
        'kind': 'kind',
        '_self': 'self'
    }

    def __init__(self, guid=None, id=None, long_id=None, name=None, version=None, tags=None, description=None, type=None, schema=None, author=None, authored=None, proof=None, kind=None, _self=None):  # noqa: E501
        """CredentialSchemaResponse - a model defined in Swagger"""  # noqa: E501
        self._guid = None
        self._id = None
        self._long_id = None
        self._name = None
        self._version = None
        self._tags = None
        self._description = None
        self._type = None
        self._schema = None
        self._author = None
        self._authored = None
        self._proof = None
        self._kind = None
        self.__self = None
        self.discriminator = None
        self.guid = guid
        self.id = id
        if long_id is not None:
            self.long_id = long_id
        self.name = name
        self.version = version
        if tags is not None:
            self.tags = tags
        self.description = description
        self.type = type
        self.schema = schema
        self.author = author
        self.authored = authored
        if proof is not None:
            self.proof = proof
        self.kind = kind
        self._self = _self

    @property
    def guid(self):
        """Gets the guid of this CredentialSchemaResponse.  # noqa: E501

        Globally unique id of the credential schema.It's composed from the bytes of the string that contain the `author`, `name`, and `version` values.The string format looks like the resource identifier: `author`/`id`?version=`version`  # noqa: E501

        :return: The guid of this CredentialSchemaResponse.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this CredentialSchemaResponse.

        Globally unique id of the credential schema.It's composed from the bytes of the string that contain the `author`, `name`, and `version` values.The string format looks like the resource identifier: `author`/`id`?version=`version`  # noqa: E501

        :param guid: The guid of this CredentialSchemaResponse.  # noqa: E501
        :type: str
        """
        if guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")  # noqa: E501

        self._guid = guid

    @property
    def id(self):
        """Gets the id of this CredentialSchemaResponse.  # noqa: E501

        A locally unique identifier to address the schema. UUID is generated by the backend.  # noqa: E501

        :return: The id of this CredentialSchemaResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CredentialSchemaResponse.

        A locally unique identifier to address the schema. UUID is generated by the backend.  # noqa: E501

        :param id: The id of this CredentialSchemaResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def long_id(self):
        """Gets the long_id of this CredentialSchemaResponse.  # noqa: E501

        Resource id of the credential schema. Contains the `author`'s DID, `id` and `version` fields.  # noqa: E501

        :return: The long_id of this CredentialSchemaResponse.  # noqa: E501
        :rtype: str
        """
        return self._long_id

    @long_id.setter
    def long_id(self, long_id):
        """Sets the long_id of this CredentialSchemaResponse.

        Resource id of the credential schema. Contains the `author`'s DID, `id` and `version` fields.  # noqa: E501

        :param long_id: The long_id of this CredentialSchemaResponse.  # noqa: E501
        :type: str
        """

        self._long_id = long_id

    @property
    def name(self):
        """Gets the name of this CredentialSchemaResponse.  # noqa: E501

        A human-readable name for the credential schema. A piece of Metadata.  # noqa: E501

        :return: The name of this CredentialSchemaResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CredentialSchemaResponse.

        A human-readable name for the credential schema. A piece of Metadata.  # noqa: E501

        :param name: The name of this CredentialSchemaResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this CredentialSchemaResponse.  # noqa: E501

        Denotes the revision of a given Credential Schema. It should follow semantic version convention to describe the impact of the schema evolution.  # noqa: E501

        :return: The version of this CredentialSchemaResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CredentialSchemaResponse.

        Denotes the revision of a given Credential Schema. It should follow semantic version convention to describe the impact of the schema evolution.  # noqa: E501

        :param version: The version of this CredentialSchemaResponse.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def tags(self):
        """Gets the tags of this CredentialSchemaResponse.  # noqa: E501

        Tokens that allow to lookup and filter the credential schema records.  # noqa: E501

        :return: The tags of this CredentialSchemaResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CredentialSchemaResponse.

        Tokens that allow to lookup and filter the credential schema records.  # noqa: E501

        :param tags: The tags of this CredentialSchemaResponse.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def description(self):
        """Gets the description of this CredentialSchemaResponse.  # noqa: E501

        A human-readable description of the credential schema  # noqa: E501

        :return: The description of this CredentialSchemaResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CredentialSchemaResponse.

        A human-readable description of the credential schema  # noqa: E501

        :param description: The description of this CredentialSchemaResponse.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def type(self):
        """Gets the type of this CredentialSchemaResponse.  # noqa: E501

        This field resolves to a JSON schema with details about the schema metadata that applies to the schema. A piece of Metadata.  # noqa: E501

        :return: The type of this CredentialSchemaResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CredentialSchemaResponse.

        This field resolves to a JSON schema with details about the schema metadata that applies to the schema. A piece of Metadata.  # noqa: E501

        :param type: The type of this CredentialSchemaResponse.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def schema(self):
        """Gets the schema of this CredentialSchemaResponse.  # noqa: E501

        Valid JSON Schema where the Credential Schema data fields are defined. A piece of Metadata  # noqa: E501

        :return: The schema of this CredentialSchemaResponse.  # noqa: E501
        :rtype: object
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this CredentialSchemaResponse.

        Valid JSON Schema where the Credential Schema data fields are defined. A piece of Metadata  # noqa: E501

        :param schema: The schema of this CredentialSchemaResponse.  # noqa: E501
        :type: object
        """
        if schema is None:
            raise ValueError("Invalid value for `schema`, must not be `None`")  # noqa: E501

        self._schema = schema

    @property
    def author(self):
        """Gets the author of this CredentialSchemaResponse.  # noqa: E501

        DID of the identity which authored the credential schema. A piece of Metadata.  # noqa: E501

        :return: The author of this CredentialSchemaResponse.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this CredentialSchemaResponse.

        DID of the identity which authored the credential schema. A piece of Metadata.  # noqa: E501

        :param author: The author of this CredentialSchemaResponse.  # noqa: E501
        :type: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def authored(self):
        """Gets the authored of this CredentialSchemaResponse.  # noqa: E501

        [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) date on which the credential schema was created. A piece of Metadata.  # noqa: E501

        :return: The authored of this CredentialSchemaResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._authored

    @authored.setter
    def authored(self, authored):
        """Sets the authored of this CredentialSchemaResponse.

        [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) date on which the credential schema was created. A piece of Metadata.  # noqa: E501

        :param authored: The authored of this CredentialSchemaResponse.  # noqa: E501
        :type: datetime
        """
        if authored is None:
            raise ValueError("Invalid value for `authored`, must not be `None`")  # noqa: E501

        self._authored = authored

    @property
    def proof(self):
        """Gets the proof of this CredentialSchemaResponse.  # noqa: E501


        :return: The proof of this CredentialSchemaResponse.  # noqa: E501
        :rtype: Proof1
        """
        return self._proof

    @proof.setter
    def proof(self, proof):
        """Sets the proof of this CredentialSchemaResponse.


        :param proof: The proof of this CredentialSchemaResponse.  # noqa: E501
        :type: Proof1
        """

        self._proof = proof

    @property
    def kind(self):
        """Gets the kind of this CredentialSchemaResponse.  # noqa: E501

        A string that identifies the type of resource being returned in the response.  # noqa: E501

        :return: The kind of this CredentialSchemaResponse.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CredentialSchemaResponse.

        A string that identifies the type of resource being returned in the response.  # noqa: E501

        :param kind: The kind of this CredentialSchemaResponse.  # noqa: E501
        :type: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def _self(self):
        """Gets the _self of this CredentialSchemaResponse.  # noqa: E501

        The URL that uniquely identifies the resource being returned in the response.  # noqa: E501

        :return: The _self of this CredentialSchemaResponse.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this CredentialSchemaResponse.

        The URL that uniquely identifies the resource being returned in the response.  # noqa: E501

        :param _self: The _self of this CredentialSchemaResponse.  # noqa: E501
        :type: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")  # noqa: E501

        self.__self = _self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CredentialSchemaResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredentialSchemaResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
