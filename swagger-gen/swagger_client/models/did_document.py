# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DIDDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'list[str]',
        'id': 'str',
        'controller': 'str',
        'verification_method': 'list[VerificationMethod]',
        'authentication': 'list[str]',
        'assertion_method': 'list[str]',
        'key_agreement': 'list[str]',
        'capability_invocation': 'list[str]',
        'capability_delegation': 'list[str]',
        'service': 'list[Service]'
    }

    attribute_map = {
        'context': '@context',
        'id': 'id',
        'controller': 'controller',
        'verification_method': 'verificationMethod',
        'authentication': 'authentication',
        'assertion_method': 'assertionMethod',
        'key_agreement': 'keyAgreement',
        'capability_invocation': 'capabilityInvocation',
        'capability_delegation': 'capabilityDelegation',
        'service': 'service'
    }

    def __init__(self, context=None, id=None, controller=None, verification_method=None, authentication=None, assertion_method=None, key_agreement=None, capability_invocation=None, capability_delegation=None, service=None):  # noqa: E501
        """DIDDocument - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._controller = None
        self._verification_method = None
        self._authentication = None
        self._assertion_method = None
        self._key_agreement = None
        self._capability_invocation = None
        self._capability_delegation = None
        self._service = None
        self.discriminator = None
        if context is not None:
            self.context = context
        self.id = id
        if controller is not None:
            self.controller = controller
        if verification_method is not None:
            self.verification_method = verification_method
        if authentication is not None:
            self.authentication = authentication
        if assertion_method is not None:
            self.assertion_method = assertion_method
        if key_agreement is not None:
            self.key_agreement = key_agreement
        if capability_invocation is not None:
            self.capability_invocation = capability_invocation
        if capability_delegation is not None:
            self.capability_delegation = capability_delegation
        if service is not None:
            self.service = service

    @property
    def context(self):
        """Gets the context of this DIDDocument.  # noqa: E501


        :return: The context of this DIDDocument.  # noqa: E501
        :rtype: list[str]
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this DIDDocument.


        :param context: The context of this DIDDocument.  # noqa: E501
        :type: list[str]
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this DIDDocument.  # noqa: E501

        [DID subject](https://www.w3.org/TR/did-core/#did-subject). The value must match the DID that was given to the resolver.  # noqa: E501

        :return: The id of this DIDDocument.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DIDDocument.

        [DID subject](https://www.w3.org/TR/did-core/#did-subject). The value must match the DID that was given to the resolver.  # noqa: E501

        :param id: The id of this DIDDocument.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def controller(self):
        """Gets the controller of this DIDDocument.  # noqa: E501

        [DID controller](https://www.w3.org/TR/did-core/#did-controller)  # noqa: E501

        :return: The controller of this DIDDocument.  # noqa: E501
        :rtype: str
        """
        return self._controller

    @controller.setter
    def controller(self, controller):
        """Sets the controller of this DIDDocument.

        [DID controller](https://www.w3.org/TR/did-core/#did-controller)  # noqa: E501

        :param controller: The controller of this DIDDocument.  # noqa: E501
        :type: str
        """

        self._controller = controller

    @property
    def verification_method(self):
        """Gets the verification_method of this DIDDocument.  # noqa: E501


        :return: The verification_method of this DIDDocument.  # noqa: E501
        :rtype: list[VerificationMethod]
        """
        return self._verification_method

    @verification_method.setter
    def verification_method(self, verification_method):
        """Sets the verification_method of this DIDDocument.


        :param verification_method: The verification_method of this DIDDocument.  # noqa: E501
        :type: list[VerificationMethod]
        """

        self._verification_method = verification_method

    @property
    def authentication(self):
        """Gets the authentication of this DIDDocument.  # noqa: E501


        :return: The authentication of this DIDDocument.  # noqa: E501
        :rtype: list[str]
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this DIDDocument.


        :param authentication: The authentication of this DIDDocument.  # noqa: E501
        :type: list[str]
        """

        self._authentication = authentication

    @property
    def assertion_method(self):
        """Gets the assertion_method of this DIDDocument.  # noqa: E501


        :return: The assertion_method of this DIDDocument.  # noqa: E501
        :rtype: list[str]
        """
        return self._assertion_method

    @assertion_method.setter
    def assertion_method(self, assertion_method):
        """Sets the assertion_method of this DIDDocument.


        :param assertion_method: The assertion_method of this DIDDocument.  # noqa: E501
        :type: list[str]
        """

        self._assertion_method = assertion_method

    @property
    def key_agreement(self):
        """Gets the key_agreement of this DIDDocument.  # noqa: E501


        :return: The key_agreement of this DIDDocument.  # noqa: E501
        :rtype: list[str]
        """
        return self._key_agreement

    @key_agreement.setter
    def key_agreement(self, key_agreement):
        """Sets the key_agreement of this DIDDocument.


        :param key_agreement: The key_agreement of this DIDDocument.  # noqa: E501
        :type: list[str]
        """

        self._key_agreement = key_agreement

    @property
    def capability_invocation(self):
        """Gets the capability_invocation of this DIDDocument.  # noqa: E501


        :return: The capability_invocation of this DIDDocument.  # noqa: E501
        :rtype: list[str]
        """
        return self._capability_invocation

    @capability_invocation.setter
    def capability_invocation(self, capability_invocation):
        """Sets the capability_invocation of this DIDDocument.


        :param capability_invocation: The capability_invocation of this DIDDocument.  # noqa: E501
        :type: list[str]
        """

        self._capability_invocation = capability_invocation

    @property
    def capability_delegation(self):
        """Gets the capability_delegation of this DIDDocument.  # noqa: E501


        :return: The capability_delegation of this DIDDocument.  # noqa: E501
        :rtype: list[str]
        """
        return self._capability_delegation

    @capability_delegation.setter
    def capability_delegation(self, capability_delegation):
        """Sets the capability_delegation of this DIDDocument.


        :param capability_delegation: The capability_delegation of this DIDDocument.  # noqa: E501
        :type: list[str]
        """

        self._capability_delegation = capability_delegation

    @property
    def service(self):
        """Gets the service of this DIDDocument.  # noqa: E501


        :return: The service of this DIDDocument.  # noqa: E501
        :rtype: list[Service]
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this DIDDocument.


        :param service: The service of this DIDDocument.  # noqa: E501
        :type: list[Service]
        """

        self._service = service

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DIDDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DIDDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
