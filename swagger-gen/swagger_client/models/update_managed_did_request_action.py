# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateManagedDIDRequestAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type': 'ActionType',
        'add_key': 'ManagedDIDKeyTemplate',
        'remove_key': 'RemoveEntryById',
        'add_service': 'Service',
        'remove_service': 'RemoveEntryById',
        'update_service': 'UpdateManagedDIDServiceAction',
        'patch_context': 'PatchContextAction'
    }

    attribute_map = {
        'action_type': 'actionType',
        'add_key': 'addKey',
        'remove_key': 'removeKey',
        'add_service': 'addService',
        'remove_service': 'removeService',
        'update_service': 'updateService',
        'patch_context': 'patchContext'
    }

    def __init__(self, action_type=None, add_key=None, remove_key=None, add_service=None, remove_service=None, update_service=None, patch_context=None):  # noqa: E501
        """UpdateManagedDIDRequestAction - a model defined in Swagger"""  # noqa: E501
        self._action_type = None
        self._add_key = None
        self._remove_key = None
        self._add_service = None
        self._remove_service = None
        self._update_service = None
        self._patch_context = None
        self.discriminator = None
        self.action_type = action_type
        if add_key is not None:
            self.add_key = add_key
        if remove_key is not None:
            self.remove_key = remove_key
        if add_service is not None:
            self.add_service = add_service
        if remove_service is not None:
            self.remove_service = remove_service
        if update_service is not None:
            self.update_service = update_service
        if patch_context is not None:
            self.patch_context = patch_context

    @property
    def action_type(self):
        """Gets the action_type of this UpdateManagedDIDRequestAction.  # noqa: E501


        :return: The action_type of this UpdateManagedDIDRequestAction.  # noqa: E501
        :rtype: ActionType
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this UpdateManagedDIDRequestAction.


        :param action_type: The action_type of this UpdateManagedDIDRequestAction.  # noqa: E501
        :type: ActionType
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")  # noqa: E501

        self._action_type = action_type

    @property
    def add_key(self):
        """Gets the add_key of this UpdateManagedDIDRequestAction.  # noqa: E501


        :return: The add_key of this UpdateManagedDIDRequestAction.  # noqa: E501
        :rtype: ManagedDIDKeyTemplate
        """
        return self._add_key

    @add_key.setter
    def add_key(self, add_key):
        """Sets the add_key of this UpdateManagedDIDRequestAction.


        :param add_key: The add_key of this UpdateManagedDIDRequestAction.  # noqa: E501
        :type: ManagedDIDKeyTemplate
        """

        self._add_key = add_key

    @property
    def remove_key(self):
        """Gets the remove_key of this UpdateManagedDIDRequestAction.  # noqa: E501


        :return: The remove_key of this UpdateManagedDIDRequestAction.  # noqa: E501
        :rtype: RemoveEntryById
        """
        return self._remove_key

    @remove_key.setter
    def remove_key(self, remove_key):
        """Sets the remove_key of this UpdateManagedDIDRequestAction.


        :param remove_key: The remove_key of this UpdateManagedDIDRequestAction.  # noqa: E501
        :type: RemoveEntryById
        """

        self._remove_key = remove_key

    @property
    def add_service(self):
        """Gets the add_service of this UpdateManagedDIDRequestAction.  # noqa: E501


        :return: The add_service of this UpdateManagedDIDRequestAction.  # noqa: E501
        :rtype: Service
        """
        return self._add_service

    @add_service.setter
    def add_service(self, add_service):
        """Sets the add_service of this UpdateManagedDIDRequestAction.


        :param add_service: The add_service of this UpdateManagedDIDRequestAction.  # noqa: E501
        :type: Service
        """

        self._add_service = add_service

    @property
    def remove_service(self):
        """Gets the remove_service of this UpdateManagedDIDRequestAction.  # noqa: E501


        :return: The remove_service of this UpdateManagedDIDRequestAction.  # noqa: E501
        :rtype: RemoveEntryById
        """
        return self._remove_service

    @remove_service.setter
    def remove_service(self, remove_service):
        """Sets the remove_service of this UpdateManagedDIDRequestAction.


        :param remove_service: The remove_service of this UpdateManagedDIDRequestAction.  # noqa: E501
        :type: RemoveEntryById
        """

        self._remove_service = remove_service

    @property
    def update_service(self):
        """Gets the update_service of this UpdateManagedDIDRequestAction.  # noqa: E501


        :return: The update_service of this UpdateManagedDIDRequestAction.  # noqa: E501
        :rtype: UpdateManagedDIDServiceAction
        """
        return self._update_service

    @update_service.setter
    def update_service(self, update_service):
        """Sets the update_service of this UpdateManagedDIDRequestAction.


        :param update_service: The update_service of this UpdateManagedDIDRequestAction.  # noqa: E501
        :type: UpdateManagedDIDServiceAction
        """

        self._update_service = update_service

    @property
    def patch_context(self):
        """Gets the patch_context of this UpdateManagedDIDRequestAction.  # noqa: E501


        :return: The patch_context of this UpdateManagedDIDRequestAction.  # noqa: E501
        :rtype: PatchContextAction
        """
        return self._patch_context

    @patch_context.setter
    def patch_context(self, patch_context):
        """Sets the patch_context of this UpdateManagedDIDRequestAction.


        :param patch_context: The patch_context of this UpdateManagedDIDRequestAction.  # noqa: E501
        :type: PatchContextAction
        """

        self._patch_context = patch_context

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateManagedDIDRequestAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateManagedDIDRequestAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
