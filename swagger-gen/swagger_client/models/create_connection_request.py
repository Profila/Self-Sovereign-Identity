# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateConnectionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label': 'str',
        'goal_code': 'str',
        'goal': 'str'
    }

    attribute_map = {
        'label': 'label',
        'goal_code': 'goalCode',
        'goal': 'goal'
    }

    def __init__(self, label=None, goal_code=None, goal=None):  # noqa: E501
        """CreateConnectionRequest - a model defined in Swagger"""  # noqa: E501
        self._label = None
        self._goal_code = None
        self._goal = None
        self.discriminator = None
        if label is not None:
            self.label = label
        if goal_code is not None:
            self.goal_code = goal_code
        if goal is not None:
            self.goal = goal

    @property
    def label(self):
        """Gets the label of this CreateConnectionRequest.  # noqa: E501

        A human readable alias for the connection.  # noqa: E501

        :return: The label of this CreateConnectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CreateConnectionRequest.

        A human readable alias for the connection.  # noqa: E501

        :param label: The label of this CreateConnectionRequest.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def goal_code(self):
        """Gets the goal_code of this CreateConnectionRequest.  # noqa: E501

        A self-attested code the receiver may want to display to the user or use in automatically deciding what to do with the out-of-band message.  # noqa: E501

        :return: The goal_code of this CreateConnectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._goal_code

    @goal_code.setter
    def goal_code(self, goal_code):
        """Sets the goal_code of this CreateConnectionRequest.

        A self-attested code the receiver may want to display to the user or use in automatically deciding what to do with the out-of-band message.  # noqa: E501

        :param goal_code: The goal_code of this CreateConnectionRequest.  # noqa: E501
        :type: str
        """

        self._goal_code = goal_code

    @property
    def goal(self):
        """Gets the goal of this CreateConnectionRequest.  # noqa: E501

        A self-attested string that the receiver may want to display to the user about the context-specific goal of the out-of-band message.  # noqa: E501

        :return: The goal of this CreateConnectionRequest.  # noqa: E501
        :rtype: str
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """Sets the goal of this CreateConnectionRequest.

        A self-attested string that the receiver may want to display to the user about the context-specific goal of the out-of-band message.  # noqa: E501

        :param goal: The goal of this CreateConnectionRequest.  # noqa: E501
        :type: str
        """

        self._goal = goal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateConnectionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateConnectionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
