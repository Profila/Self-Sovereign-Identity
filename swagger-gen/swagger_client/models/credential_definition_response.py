# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CredentialDefinitionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'guid': 'str',
        'id': 'str',
        'long_id': 'str',
        'name': 'str',
        'version': 'str',
        'tag': 'str',
        'description': 'str',
        'author': 'str',
        'authored': 'datetime',
        'schema_id': 'str',
        'definition': 'object',
        'key_correctness_proof': 'object',
        'signature_type': 'str',
        'support_revocation': 'bool',
        'proof': 'Proof',
        'kind': 'str',
        '_self': 'str'
    }

    attribute_map = {
        'guid': 'guid',
        'id': 'id',
        'long_id': 'longId',
        'name': 'name',
        'version': 'version',
        'tag': 'tag',
        'description': 'description',
        'author': 'author',
        'authored': 'authored',
        'schema_id': 'schemaId',
        'definition': 'definition',
        'key_correctness_proof': 'keyCorrectnessProof',
        'signature_type': 'signatureType',
        'support_revocation': 'supportRevocation',
        'proof': 'proof',
        'kind': 'kind',
        '_self': 'self'
    }

    def __init__(self, guid=None, id=None, long_id=None, name=None, version=None, tag=None, description=None, author=None, authored=None, schema_id=None, definition=None, key_correctness_proof=None, signature_type=None, support_revocation=None, proof=None, kind=None, _self=None):  # noqa: E501
        """CredentialDefinitionResponse - a model defined in Swagger"""  # noqa: E501
        self._guid = None
        self._id = None
        self._long_id = None
        self._name = None
        self._version = None
        self._tag = None
        self._description = None
        self._author = None
        self._authored = None
        self._schema_id = None
        self._definition = None
        self._key_correctness_proof = None
        self._signature_type = None
        self._support_revocation = None
        self._proof = None
        self._kind = None
        self.__self = None
        self.discriminator = None
        self.guid = guid
        self.id = id
        if long_id is not None:
            self.long_id = long_id
        self.name = name
        self.version = version
        self.tag = tag
        self.description = description
        self.author = author
        self.authored = authored
        self.schema_id = schema_id
        self.definition = definition
        self.key_correctness_proof = key_correctness_proof
        self.signature_type = signature_type
        self.support_revocation = support_revocation
        if proof is not None:
            self.proof = proof
        self.kind = kind
        self._self = _self

    @property
    def guid(self):
        """Gets the guid of this CredentialDefinitionResponse.  # noqa: E501

        Globally unique id of the credential definition.It's composed from the bytes of the string that contain the `author`, `name`, and `version` values.The string format looks like the resource identifier: `author`/`id`?version=`version`  # noqa: E501

        :return: The guid of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid):
        """Sets the guid of this CredentialDefinitionResponse.

        Globally unique id of the credential definition.It's composed from the bytes of the string that contain the `author`, `name`, and `version` values.The string format looks like the resource identifier: `author`/`id`?version=`version`  # noqa: E501

        :param guid: The guid of this CredentialDefinitionResponse.  # noqa: E501
        :type: str
        """
        if guid is None:
            raise ValueError("Invalid value for `guid`, must not be `None`")  # noqa: E501

        self._guid = guid

    @property
    def id(self):
        """Gets the id of this CredentialDefinitionResponse.  # noqa: E501

        A locally unique identifier to address the credential definition. UUID is generated by the backend.  # noqa: E501

        :return: The id of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CredentialDefinitionResponse.

        A locally unique identifier to address the credential definition. UUID is generated by the backend.  # noqa: E501

        :param id: The id of this CredentialDefinitionResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def long_id(self):
        """Gets the long_id of this CredentialDefinitionResponse.  # noqa: E501

        Resource id of the credential definition. Contains the `author`'s DID, `id` and `version` fields.  # noqa: E501

        :return: The long_id of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._long_id

    @long_id.setter
    def long_id(self, long_id):
        """Sets the long_id of this CredentialDefinitionResponse.

        Resource id of the credential definition. Contains the `author`'s DID, `id` and `version` fields.  # noqa: E501

        :param long_id: The long_id of this CredentialDefinitionResponse.  # noqa: E501
        :type: str
        """

        self._long_id = long_id

    @property
    def name(self):
        """Gets the name of this CredentialDefinitionResponse.  # noqa: E501

        A human-readable name for the credential definition. A piece of Metadata.  # noqa: E501

        :return: The name of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CredentialDefinitionResponse.

        A human-readable name for the credential definition. A piece of Metadata.  # noqa: E501

        :param name: The name of this CredentialDefinitionResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this CredentialDefinitionResponse.  # noqa: E501

        Denotes the revision of a given Credential Definition. It should follow semantic version convention to describe the impact of the credential definition evolution.  # noqa: E501

        :return: The version of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CredentialDefinitionResponse.

        Denotes the revision of a given Credential Definition. It should follow semantic version convention to describe the impact of the credential definition evolution.  # noqa: E501

        :param version: The version of this CredentialDefinitionResponse.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def tag(self):
        """Gets the tag of this CredentialDefinitionResponse.  # noqa: E501

        Token that allow to lookup and filter the credential definition records.  # noqa: E501

        :return: The tag of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this CredentialDefinitionResponse.

        Token that allow to lookup and filter the credential definition records.  # noqa: E501

        :param tag: The tag of this CredentialDefinitionResponse.  # noqa: E501
        :type: str
        """
        if tag is None:
            raise ValueError("Invalid value for `tag`, must not be `None`")  # noqa: E501

        self._tag = tag

    @property
    def description(self):
        """Gets the description of this CredentialDefinitionResponse.  # noqa: E501

        A human-readable description of the credential definition  # noqa: E501

        :return: The description of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CredentialDefinitionResponse.

        A human-readable description of the credential definition  # noqa: E501

        :param description: The description of this CredentialDefinitionResponse.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def author(self):
        """Gets the author of this CredentialDefinitionResponse.  # noqa: E501

        DID of the identity which authored the credential definition. A piece of Metadata.  # noqa: E501

        :return: The author of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this CredentialDefinitionResponse.

        DID of the identity which authored the credential definition. A piece of Metadata.  # noqa: E501

        :param author: The author of this CredentialDefinitionResponse.  # noqa: E501
        :type: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def authored(self):
        """Gets the authored of this CredentialDefinitionResponse.  # noqa: E501

        [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) date on which the credential definition was created. A piece of Metadata.  # noqa: E501

        :return: The authored of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._authored

    @authored.setter
    def authored(self, authored):
        """Sets the authored of this CredentialDefinitionResponse.

        [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) date on which the credential definition was created. A piece of Metadata.  # noqa: E501

        :param authored: The authored of this CredentialDefinitionResponse.  # noqa: E501
        :type: datetime
        """
        if authored is None:
            raise ValueError("Invalid value for `authored`, must not be `None`")  # noqa: E501

        self._authored = authored

    @property
    def schema_id(self):
        """Gets the schema_id of this CredentialDefinitionResponse.  # noqa: E501

        The unique identifier of the schema used for this credential definition.  # noqa: E501

        :return: The schema_id of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._schema_id

    @schema_id.setter
    def schema_id(self, schema_id):
        """Sets the schema_id of this CredentialDefinitionResponse.

        The unique identifier of the schema used for this credential definition.  # noqa: E501

        :param schema_id: The schema_id of this CredentialDefinitionResponse.  # noqa: E501
        :type: str
        """
        if schema_id is None:
            raise ValueError("Invalid value for `schema_id`, must not be `None`")  # noqa: E501

        self._schema_id = schema_id

    @property
    def definition(self):
        """Gets the definition of this CredentialDefinitionResponse.  # noqa: E501

        Definition object that represents the actual definition of the credential.  # noqa: E501

        :return: The definition of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: object
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this CredentialDefinitionResponse.

        Definition object that represents the actual definition of the credential.  # noqa: E501

        :param definition: The definition of this CredentialDefinitionResponse.  # noqa: E501
        :type: object
        """
        if definition is None:
            raise ValueError("Invalid value for `definition`, must not be `None`")  # noqa: E501

        self._definition = definition

    @property
    def key_correctness_proof(self):
        """Gets the key_correctness_proof of this CredentialDefinitionResponse.  # noqa: E501

        A proof that validates the correctness of the key within the context of the credential definition.  # noqa: E501

        :return: The key_correctness_proof of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: object
        """
        return self._key_correctness_proof

    @key_correctness_proof.setter
    def key_correctness_proof(self, key_correctness_proof):
        """Sets the key_correctness_proof of this CredentialDefinitionResponse.

        A proof that validates the correctness of the key within the context of the credential definition.  # noqa: E501

        :param key_correctness_proof: The key_correctness_proof of this CredentialDefinitionResponse.  # noqa: E501
        :type: object
        """
        if key_correctness_proof is None:
            raise ValueError("Invalid value for `key_correctness_proof`, must not be `None`")  # noqa: E501

        self._key_correctness_proof = key_correctness_proof

    @property
    def signature_type(self):
        """Gets the signature_type of this CredentialDefinitionResponse.  # noqa: E501

        Signature type used in the CredentialDefinition.  # noqa: E501

        :return: The signature_type of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._signature_type

    @signature_type.setter
    def signature_type(self, signature_type):
        """Sets the signature_type of this CredentialDefinitionResponse.

        Signature type used in the CredentialDefinition.  # noqa: E501

        :param signature_type: The signature_type of this CredentialDefinitionResponse.  # noqa: E501
        :type: str
        """
        if signature_type is None:
            raise ValueError("Invalid value for `signature_type`, must not be `None`")  # noqa: E501

        self._signature_type = signature_type

    @property
    def support_revocation(self):
        """Gets the support_revocation of this CredentialDefinitionResponse.  # noqa: E501

        Boolean flag indicating whether revocation is supported for this CredentialDefinition.  # noqa: E501

        :return: The support_revocation of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._support_revocation

    @support_revocation.setter
    def support_revocation(self, support_revocation):
        """Sets the support_revocation of this CredentialDefinitionResponse.

        Boolean flag indicating whether revocation is supported for this CredentialDefinition.  # noqa: E501

        :param support_revocation: The support_revocation of this CredentialDefinitionResponse.  # noqa: E501
        :type: bool
        """
        if support_revocation is None:
            raise ValueError("Invalid value for `support_revocation`, must not be `None`")  # noqa: E501

        self._support_revocation = support_revocation

    @property
    def proof(self):
        """Gets the proof of this CredentialDefinitionResponse.  # noqa: E501


        :return: The proof of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: Proof
        """
        return self._proof

    @proof.setter
    def proof(self, proof):
        """Sets the proof of this CredentialDefinitionResponse.


        :param proof: The proof of this CredentialDefinitionResponse.  # noqa: E501
        :type: Proof
        """

        self._proof = proof

    @property
    def kind(self):
        """Gets the kind of this CredentialDefinitionResponse.  # noqa: E501

        A string that identifies the type of resource being returned in the response.  # noqa: E501

        :return: The kind of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CredentialDefinitionResponse.

        A string that identifies the type of resource being returned in the response.  # noqa: E501

        :param kind: The kind of this CredentialDefinitionResponse.  # noqa: E501
        :type: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def _self(self):
        """Gets the _self of this CredentialDefinitionResponse.  # noqa: E501

        The URL that uniquely identifies the resource being returned in the response.  # noqa: E501

        :return: The _self of this CredentialDefinitionResponse.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this CredentialDefinitionResponse.

        The URL that uniquely identifies the resource being returned in the response.  # noqa: E501

        :param _self: The _self of this CredentialDefinitionResponse.  # noqa: E501
        :type: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")  # noqa: E501

        self.__self = _self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CredentialDefinitionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredentialDefinitionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
