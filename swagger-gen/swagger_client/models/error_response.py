# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ErrorResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'int',
        'type': 'str',
        'title': 'str',
        'detail': 'str',
        'instance': 'str'
    }

    attribute_map = {
        'status': 'status',
        'type': 'type',
        'title': 'title',
        'detail': 'detail',
        'instance': 'instance'
    }

    def __init__(self, status=None, type=None, title=None, detail=None, instance=None):  # noqa: E501
        """ErrorResponse - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._type = None
        self._title = None
        self._detail = None
        self._instance = None
        self.discriminator = None
        self.status = status
        self.type = type
        self.title = title
        if detail is not None:
            self.detail = detail
        self.instance = instance

    @property
    def status(self):
        """Gets the status of this ErrorResponse.  # noqa: E501

        The HTTP status code for this occurrence of the problem.  # noqa: E501

        :return: The status of this ErrorResponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ErrorResponse.

        The HTTP status code for this occurrence of the problem.  # noqa: E501

        :param status: The status of this ErrorResponse.  # noqa: E501
        :type: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def type(self):
        """Gets the type of this ErrorResponse.  # noqa: E501

        A URI reference that identifies the problem type.  # noqa: E501

        :return: The type of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ErrorResponse.

        A URI reference that identifies the problem type.  # noqa: E501

        :param type: The type of this ErrorResponse.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def title(self):
        """Gets the title of this ErrorResponse.  # noqa: E501

        A short, human-readable summary of the problem type. It does not change from occurrence to occurrence of the problem.  # noqa: E501

        :return: The title of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ErrorResponse.

        A short, human-readable summary of the problem type. It does not change from occurrence to occurrence of the problem.  # noqa: E501

        :param title: The title of this ErrorResponse.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def detail(self):
        """Gets the detail of this ErrorResponse.  # noqa: E501

        A human-readable explanation specific to this occurrence of the problem.  # noqa: E501

        :return: The detail of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this ErrorResponse.

        A human-readable explanation specific to this occurrence of the problem.  # noqa: E501

        :param detail: The detail of this ErrorResponse.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def instance(self):
        """Gets the instance of this ErrorResponse.  # noqa: E501

        A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.  # noqa: E501

        :return: The instance of this ErrorResponse.  # noqa: E501
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this ErrorResponse.

        A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.  # noqa: E501

        :param instance: The instance of this ErrorResponse.  # noqa: E501
        :type: str
        """
        if instance is None:
            raise ValueError("Invalid value for `instance`, must not be `None`")  # noqa: E501

        self._instance = instance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
