# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnoncredPresentationRequestV1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requested_attributes': 'MapAnoncredRequestedAttributeV1',
        'requested_predicates': 'MapAnoncredRequestedPredicateV1',
        'name': 'str',
        'nonce': 'str',
        'version': 'str',
        'non_revoked': 'AnoncredNonRevokedIntervalV1'
    }

    attribute_map = {
        'requested_attributes': 'requested_attributes',
        'requested_predicates': 'requested_predicates',
        'name': 'name',
        'nonce': 'nonce',
        'version': 'version',
        'non_revoked': 'non_revoked'
    }

    def __init__(self, requested_attributes=None, requested_predicates=None, name=None, nonce=None, version=None, non_revoked=None):  # noqa: E501
        """AnoncredPresentationRequestV1 - a model defined in Swagger"""  # noqa: E501
        self._requested_attributes = None
        self._requested_predicates = None
        self._name = None
        self._nonce = None
        self._version = None
        self._non_revoked = None
        self.discriminator = None
        self.requested_attributes = requested_attributes
        self.requested_predicates = requested_predicates
        self.name = name
        self.nonce = nonce
        self.version = version
        if non_revoked is not None:
            self.non_revoked = non_revoked

    @property
    def requested_attributes(self):
        """Gets the requested_attributes of this AnoncredPresentationRequestV1.  # noqa: E501


        :return: The requested_attributes of this AnoncredPresentationRequestV1.  # noqa: E501
        :rtype: MapAnoncredRequestedAttributeV1
        """
        return self._requested_attributes

    @requested_attributes.setter
    def requested_attributes(self, requested_attributes):
        """Sets the requested_attributes of this AnoncredPresentationRequestV1.


        :param requested_attributes: The requested_attributes of this AnoncredPresentationRequestV1.  # noqa: E501
        :type: MapAnoncredRequestedAttributeV1
        """
        if requested_attributes is None:
            raise ValueError("Invalid value for `requested_attributes`, must not be `None`")  # noqa: E501

        self._requested_attributes = requested_attributes

    @property
    def requested_predicates(self):
        """Gets the requested_predicates of this AnoncredPresentationRequestV1.  # noqa: E501


        :return: The requested_predicates of this AnoncredPresentationRequestV1.  # noqa: E501
        :rtype: MapAnoncredRequestedPredicateV1
        """
        return self._requested_predicates

    @requested_predicates.setter
    def requested_predicates(self, requested_predicates):
        """Sets the requested_predicates of this AnoncredPresentationRequestV1.


        :param requested_predicates: The requested_predicates of this AnoncredPresentationRequestV1.  # noqa: E501
        :type: MapAnoncredRequestedPredicateV1
        """
        if requested_predicates is None:
            raise ValueError("Invalid value for `requested_predicates`, must not be `None`")  # noqa: E501

        self._requested_predicates = requested_predicates

    @property
    def name(self):
        """Gets the name of this AnoncredPresentationRequestV1.  # noqa: E501


        :return: The name of this AnoncredPresentationRequestV1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnoncredPresentationRequestV1.


        :param name: The name of this AnoncredPresentationRequestV1.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def nonce(self):
        """Gets the nonce of this AnoncredPresentationRequestV1.  # noqa: E501


        :return: The nonce of this AnoncredPresentationRequestV1.  # noqa: E501
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this AnoncredPresentationRequestV1.


        :param nonce: The nonce of this AnoncredPresentationRequestV1.  # noqa: E501
        :type: str
        """
        if nonce is None:
            raise ValueError("Invalid value for `nonce`, must not be `None`")  # noqa: E501

        self._nonce = nonce

    @property
    def version(self):
        """Gets the version of this AnoncredPresentationRequestV1.  # noqa: E501


        :return: The version of this AnoncredPresentationRequestV1.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AnoncredPresentationRequestV1.


        :param version: The version of this AnoncredPresentationRequestV1.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def non_revoked(self):
        """Gets the non_revoked of this AnoncredPresentationRequestV1.  # noqa: E501


        :return: The non_revoked of this AnoncredPresentationRequestV1.  # noqa: E501
        :rtype: AnoncredNonRevokedIntervalV1
        """
        return self._non_revoked

    @non_revoked.setter
    def non_revoked(self, non_revoked):
        """Sets the non_revoked of this AnoncredPresentationRequestV1.


        :param non_revoked: The non_revoked of this AnoncredPresentationRequestV1.  # noqa: E501
        :type: AnoncredNonRevokedIntervalV1
        """

        self._non_revoked = non_revoked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnoncredPresentationRequestV1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnoncredPresentationRequestV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
