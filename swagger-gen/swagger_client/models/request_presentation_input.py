# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RequestPresentationInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'connection_id': 'str',
        'options': 'Options',
        'proofs': 'list[ProofRequestAux]',
        'anoncred_presentation_request': 'AnoncredPresentationRequestV1',
        'credential_format': 'str'
    }

    attribute_map = {
        'connection_id': 'connectionId',
        'options': 'options',
        'proofs': 'proofs',
        'anoncred_presentation_request': 'anoncredPresentationRequest',
        'credential_format': 'credentialFormat'
    }

    def __init__(self, connection_id=None, options=None, proofs=None, anoncred_presentation_request=None, credential_format=None):  # noqa: E501
        """RequestPresentationInput - a model defined in Swagger"""  # noqa: E501
        self._connection_id = None
        self._options = None
        self._proofs = None
        self._anoncred_presentation_request = None
        self._credential_format = None
        self.discriminator = None
        self.connection_id = connection_id
        if options is not None:
            self.options = options
        if proofs is not None:
            self.proofs = proofs
        if anoncred_presentation_request is not None:
            self.anoncred_presentation_request = anoncred_presentation_request
        if credential_format is not None:
            self.credential_format = credential_format

    @property
    def connection_id(self):
        """Gets the connection_id of this RequestPresentationInput.  # noqa: E501

        The unique identifier of an established connection between the verifier and the prover.  # noqa: E501

        :return: The connection_id of this RequestPresentationInput.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this RequestPresentationInput.

        The unique identifier of an established connection between the verifier and the prover.  # noqa: E501

        :param connection_id: The connection_id of this RequestPresentationInput.  # noqa: E501
        :type: str
        """
        if connection_id is None:
            raise ValueError("Invalid value for `connection_id`, must not be `None`")  # noqa: E501

        self._connection_id = connection_id

    @property
    def options(self):
        """Gets the options of this RequestPresentationInput.  # noqa: E501


        :return: The options of this RequestPresentationInput.  # noqa: E501
        :rtype: Options
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this RequestPresentationInput.


        :param options: The options of this RequestPresentationInput.  # noqa: E501
        :type: Options
        """

        self._options = options

    @property
    def proofs(self):
        """Gets the proofs of this RequestPresentationInput.  # noqa: E501

        The type of proofs requested in the context of this proof presentation request (e.g., VC schema, trusted issuers, etc.)  # noqa: E501

        :return: The proofs of this RequestPresentationInput.  # noqa: E501
        :rtype: list[ProofRequestAux]
        """
        return self._proofs

    @proofs.setter
    def proofs(self, proofs):
        """Sets the proofs of this RequestPresentationInput.

        The type of proofs requested in the context of this proof presentation request (e.g., VC schema, trusted issuers, etc.)  # noqa: E501

        :param proofs: The proofs of this RequestPresentationInput.  # noqa: E501
        :type: list[ProofRequestAux]
        """

        self._proofs = proofs

    @property
    def anoncred_presentation_request(self):
        """Gets the anoncred_presentation_request of this RequestPresentationInput.  # noqa: E501


        :return: The anoncred_presentation_request of this RequestPresentationInput.  # noqa: E501
        :rtype: AnoncredPresentationRequestV1
        """
        return self._anoncred_presentation_request

    @anoncred_presentation_request.setter
    def anoncred_presentation_request(self, anoncred_presentation_request):
        """Sets the anoncred_presentation_request of this RequestPresentationInput.


        :param anoncred_presentation_request: The anoncred_presentation_request of this RequestPresentationInput.  # noqa: E501
        :type: AnoncredPresentationRequestV1
        """

        self._anoncred_presentation_request = anoncred_presentation_request

    @property
    def credential_format(self):
        """Gets the credential_format of this RequestPresentationInput.  # noqa: E501

        The credential format (default to 'JWT')  # noqa: E501

        :return: The credential_format of this RequestPresentationInput.  # noqa: E501
        :rtype: str
        """
        return self._credential_format

    @credential_format.setter
    def credential_format(self, credential_format):
        """Sets the credential_format of this RequestPresentationInput.

        The credential format (default to 'JWT')  # noqa: E501

        :param credential_format: The credential_format of this RequestPresentationInput.  # noqa: E501
        :type: str
        """

        self._credential_format = credential_format

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RequestPresentationInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RequestPresentationInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
