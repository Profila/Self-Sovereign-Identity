# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DIDDocumentMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deactivated': 'bool',
        'canonical_id': 'str',
        'version_id': 'str',
        'created': 'str',
        'updated': 'str'
    }

    attribute_map = {
        'deactivated': 'deactivated',
        'canonical_id': 'canonicalId',
        'version_id': 'versionId',
        'created': 'created',
        'updated': 'updated'
    }

    def __init__(self, deactivated=None, canonical_id=None, version_id=None, created=None, updated=None):  # noqa: E501
        """DIDDocumentMetadata - a model defined in Swagger"""  # noqa: E501
        self._deactivated = None
        self._canonical_id = None
        self._version_id = None
        self._created = None
        self._updated = None
        self.discriminator = None
        if deactivated is not None:
            self.deactivated = deactivated
        if canonical_id is not None:
            self.canonical_id = canonical_id
        if version_id is not None:
            self.version_id = version_id
        if created is not None:
            self.created = created
        if updated is not None:
            self.updated = updated

    @property
    def deactivated(self):
        """Gets the deactivated of this DIDDocumentMetadata.  # noqa: E501

        If a DID has been deactivated, DID document metadata MUST include this property with the boolean value true. If a DID has not been deactivated, this property is OPTIONAL, but if included, MUST have the boolean value false.  # noqa: E501

        :return: The deactivated of this DIDDocumentMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._deactivated

    @deactivated.setter
    def deactivated(self, deactivated):
        """Sets the deactivated of this DIDDocumentMetadata.

        If a DID has been deactivated, DID document metadata MUST include this property with the boolean value true. If a DID has not been deactivated, this property is OPTIONAL, but if included, MUST have the boolean value false.  # noqa: E501

        :param deactivated: The deactivated of this DIDDocumentMetadata.  # noqa: E501
        :type: bool
        """

        self._deactivated = deactivated

    @property
    def canonical_id(self):
        """Gets the canonical_id of this DIDDocumentMetadata.  # noqa: E501

         A DID in canonical form. If a DID is in long form and has been published, DID document metadata MUST contain a `canonicalId`` property with the short form DID as its value. If a DID in short form or has not been published, DID document metadata MUST NOT contain a `canonicalId` property.   # noqa: E501

        :return: The canonical_id of this DIDDocumentMetadata.  # noqa: E501
        :rtype: str
        """
        return self._canonical_id

    @canonical_id.setter
    def canonical_id(self, canonical_id):
        """Sets the canonical_id of this DIDDocumentMetadata.

         A DID in canonical form. If a DID is in long form and has been published, DID document metadata MUST contain a `canonicalId`` property with the short form DID as its value. If a DID in short form or has not been published, DID document metadata MUST NOT contain a `canonicalId` property.   # noqa: E501

        :param canonical_id: The canonical_id of this DIDDocumentMetadata.  # noqa: E501
        :type: str
        """

        self._canonical_id = canonical_id

    @property
    def version_id(self):
        """Gets the version_id of this DIDDocumentMetadata.  # noqa: E501

         DID document metadata MUST contain a versionId property with the hash of the AtalaOperation contained in the latest valid SignedAtalaOperation that created the DID or changed the DID's internal state.   # noqa: E501

        :return: The version_id of this DIDDocumentMetadata.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this DIDDocumentMetadata.

         DID document metadata MUST contain a versionId property with the hash of the AtalaOperation contained in the latest valid SignedAtalaOperation that created the DID or changed the DID's internal state.   # noqa: E501

        :param version_id: The version_id of this DIDDocumentMetadata.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def created(self):
        """Gets the created of this DIDDocumentMetadata.  # noqa: E501

        The timestamp of the Cardano block that contained the first valid SignedAtalaOperation with a CreateDIDOperation that created the DID.  # noqa: E501

        :return: The created of this DIDDocumentMetadata.  # noqa: E501
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DIDDocumentMetadata.

        The timestamp of the Cardano block that contained the first valid SignedAtalaOperation with a CreateDIDOperation that created the DID.  # noqa: E501

        :param created: The created of this DIDDocumentMetadata.  # noqa: E501
        :type: str
        """

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this DIDDocumentMetadata.  # noqa: E501

        The timestamp of the Cardano block that contained the latest valid SignedAtalaOperation that changed the DID's internal state.  # noqa: E501

        :return: The updated of this DIDDocumentMetadata.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this DIDDocumentMetadata.

        The timestamp of the Cardano block that contained the latest valid SignedAtalaOperation that changed the DID's internal state.  # noqa: E501

        :param updated: The updated of this DIDDocumentMetadata.  # noqa: E501
        :type: str
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DIDDocumentMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DIDDocumentMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
