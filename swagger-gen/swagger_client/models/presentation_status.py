# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PresentationStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'presentation_id': 'str',
        'thid': 'str',
        'role': 'str',
        'status': 'str',
        'proofs': 'list[ProofRequestAux]',
        'data': 'list[str]',
        'connection_id': 'str',
        'meta_retries': 'int'
    }

    attribute_map = {
        'presentation_id': 'presentationId',
        'thid': 'thid',
        'role': 'role',
        'status': 'status',
        'proofs': 'proofs',
        'data': 'data',
        'connection_id': 'connectionId',
        'meta_retries': 'metaRetries'
    }

    def __init__(self, presentation_id=None, thid=None, role=None, status=None, proofs=None, data=None, connection_id=None, meta_retries=None):  # noqa: E501
        """PresentationStatus - a model defined in Swagger"""  # noqa: E501
        self._presentation_id = None
        self._thid = None
        self._role = None
        self._status = None
        self._proofs = None
        self._data = None
        self._connection_id = None
        self._meta_retries = None
        self.discriminator = None
        self.presentation_id = presentation_id
        self.thid = thid
        self.role = role
        self.status = status
        if proofs is not None:
            self.proofs = proofs
        if data is not None:
            self.data = data
        if connection_id is not None:
            self.connection_id = connection_id
        self.meta_retries = meta_retries

    @property
    def presentation_id(self):
        """Gets the presentation_id of this PresentationStatus.  # noqa: E501

        The unique identifier of the presentation record.  # noqa: E501

        :return: The presentation_id of this PresentationStatus.  # noqa: E501
        :rtype: str
        """
        return self._presentation_id

    @presentation_id.setter
    def presentation_id(self, presentation_id):
        """Sets the presentation_id of this PresentationStatus.

        The unique identifier of the presentation record.  # noqa: E501

        :param presentation_id: The presentation_id of this PresentationStatus.  # noqa: E501
        :type: str
        """
        if presentation_id is None:
            raise ValueError("Invalid value for `presentation_id`, must not be `None`")  # noqa: E501

        self._presentation_id = presentation_id

    @property
    def thid(self):
        """Gets the thid of this PresentationStatus.  # noqa: E501

        The unique identifier of the thread this presentation record belongs to. The value will identical on both sides of the presentation flow (verifier and prover)  # noqa: E501

        :return: The thid of this PresentationStatus.  # noqa: E501
        :rtype: str
        """
        return self._thid

    @thid.setter
    def thid(self, thid):
        """Sets the thid of this PresentationStatus.

        The unique identifier of the thread this presentation record belongs to. The value will identical on both sides of the presentation flow (verifier and prover)  # noqa: E501

        :param thid: The thid of this PresentationStatus.  # noqa: E501
        :type: str
        """
        if thid is None:
            raise ValueError("Invalid value for `thid`, must not be `None`")  # noqa: E501

        self._thid = thid

    @property
    def role(self):
        """Gets the role of this PresentationStatus.  # noqa: E501

        The role played by the Prism agent in the proof presentation flow.  # noqa: E501

        :return: The role of this PresentationStatus.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this PresentationStatus.

        The role played by the Prism agent in the proof presentation flow.  # noqa: E501

        :param role: The role of this PresentationStatus.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["Verifier", "Prover"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def status(self):
        """Gets the status of this PresentationStatus.  # noqa: E501

        The current state of the proof presentation record.  # noqa: E501

        :return: The status of this PresentationStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PresentationStatus.

        The current state of the proof presentation record.  # noqa: E501

        :param status: The status of this PresentationStatus.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["RequestPending", "RequestSent", "RequestReceived", "RequestRejected", "PresentationPending", "PresentationGenerated", "PresentationSent", "PresentationReceived", "PresentationVerified", "PresentationAccepted", "PresentationRejected", "ProblemReportPending", "ProblemReportSent", "ProblemReportReceived"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def proofs(self):
        """Gets the proofs of this PresentationStatus.  # noqa: E501

        The type of proofs requested in the context of this proof presentation request (e.g., VC schema, trusted issuers, etc.)  # noqa: E501

        :return: The proofs of this PresentationStatus.  # noqa: E501
        :rtype: list[ProofRequestAux]
        """
        return self._proofs

    @proofs.setter
    def proofs(self, proofs):
        """Sets the proofs of this PresentationStatus.

        The type of proofs requested in the context of this proof presentation request (e.g., VC schema, trusted issuers, etc.)  # noqa: E501

        :param proofs: The proofs of this PresentationStatus.  # noqa: E501
        :type: list[ProofRequestAux]
        """

        self._proofs = proofs

    @property
    def data(self):
        """Gets the data of this PresentationStatus.  # noqa: E501

        The list of proofs presented by the prover to the verifier.  # noqa: E501

        :return: The data of this PresentationStatus.  # noqa: E501
        :rtype: list[str]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PresentationStatus.

        The list of proofs presented by the prover to the verifier.  # noqa: E501

        :param data: The data of this PresentationStatus.  # noqa: E501
        :type: list[str]
        """

        self._data = data

    @property
    def connection_id(self):
        """Gets the connection_id of this PresentationStatus.  # noqa: E501

        The unique identifier of an established connection between the verifier and the prover.  # noqa: E501

        :return: The connection_id of this PresentationStatus.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this PresentationStatus.

        The unique identifier of an established connection between the verifier and the prover.  # noqa: E501

        :param connection_id: The connection_id of this PresentationStatus.  # noqa: E501
        :type: str
        """

        self._connection_id = connection_id

    @property
    def meta_retries(self):
        """Gets the meta_retries of this PresentationStatus.  # noqa: E501

        The maximum background processing attempts remaining for this record  # noqa: E501

        :return: The meta_retries of this PresentationStatus.  # noqa: E501
        :rtype: int
        """
        return self._meta_retries

    @meta_retries.setter
    def meta_retries(self, meta_retries):
        """Sets the meta_retries of this PresentationStatus.

        The maximum background processing attempts remaining for this record  # noqa: E501

        :param meta_retries: The meta_retries of this PresentationStatus.  # noqa: E501
        :type: int
        """
        if meta_retries is None:
            raise ValueError("Invalid value for `meta_retries`, must not be `None`")  # noqa: E501

        self._meta_retries = meta_retries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PresentationStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PresentationStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
