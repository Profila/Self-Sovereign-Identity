# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IssueCredentialRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'record_id': 'str',
        'thid': 'str',
        'credential_format': 'str',
        'subject_id': 'str',
        'validity_period': 'float',
        'claims': 'object',
        'automatic_issuance': 'bool',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'role': 'str',
        'protocol_state': 'str',
        'credential': 'str',
        'issuing_did': 'str',
        'meta_retries': 'int'
    }

    attribute_map = {
        'record_id': 'recordId',
        'thid': 'thid',
        'credential_format': 'credentialFormat',
        'subject_id': 'subjectId',
        'validity_period': 'validityPeriod',
        'claims': 'claims',
        'automatic_issuance': 'automaticIssuance',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'role': 'role',
        'protocol_state': 'protocolState',
        'credential': 'credential',
        'issuing_did': 'issuingDID',
        'meta_retries': 'metaRetries'
    }

    def __init__(self, record_id=None, thid=None, credential_format=None, subject_id=None, validity_period=None, claims=None, automatic_issuance=None, created_at=None, updated_at=None, role=None, protocol_state=None, credential=None, issuing_did=None, meta_retries=None):  # noqa: E501
        """IssueCredentialRecord - a model defined in Swagger"""  # noqa: E501
        self._record_id = None
        self._thid = None
        self._credential_format = None
        self._subject_id = None
        self._validity_period = None
        self._claims = None
        self._automatic_issuance = None
        self._created_at = None
        self._updated_at = None
        self._role = None
        self._protocol_state = None
        self._credential = None
        self._issuing_did = None
        self._meta_retries = None
        self.discriminator = None
        self.record_id = record_id
        self.thid = thid
        self.credential_format = credential_format
        if subject_id is not None:
            self.subject_id = subject_id
        if validity_period is not None:
            self.validity_period = validity_period
        self.claims = claims
        if automatic_issuance is not None:
            self.automatic_issuance = automatic_issuance
        self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        self.role = role
        self.protocol_state = protocol_state
        if credential is not None:
            self.credential = credential
        if issuing_did is not None:
            self.issuing_did = issuing_did
        self.meta_retries = meta_retries

    @property
    def record_id(self):
        """Gets the record_id of this IssueCredentialRecord.  # noqa: E501

         The unique identifier of the issue credential record. This identifier is internal to the agent and not shared between issuer and holder.   # noqa: E501

        :return: The record_id of this IssueCredentialRecord.  # noqa: E501
        :rtype: str
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this IssueCredentialRecord.

         The unique identifier of the issue credential record. This identifier is internal to the agent and not shared between issuer and holder.   # noqa: E501

        :param record_id: The record_id of this IssueCredentialRecord.  # noqa: E501
        :type: str
        """
        if record_id is None:
            raise ValueError("Invalid value for `record_id`, must not be `None`")  # noqa: E501

        self._record_id = record_id

    @property
    def thid(self):
        """Gets the thid of this IssueCredentialRecord.  # noqa: E501

         The unique identifier of the 'thread' identifying the specific issuance flow execution as a whole. This same unique 'thid' value is included in every message exchanged during the flow execution. It is shared between the issuer and the holder agents and its value identical on both sides.   # noqa: E501

        :return: The thid of this IssueCredentialRecord.  # noqa: E501
        :rtype: str
        """
        return self._thid

    @thid.setter
    def thid(self, thid):
        """Sets the thid of this IssueCredentialRecord.

         The unique identifier of the 'thread' identifying the specific issuance flow execution as a whole. This same unique 'thid' value is included in every message exchanged during the flow execution. It is shared between the issuer and the holder agents and its value identical on both sides.   # noqa: E501

        :param thid: The thid of this IssueCredentialRecord.  # noqa: E501
        :type: str
        """
        if thid is None:
            raise ValueError("Invalid value for `thid`, must not be `None`")  # noqa: E501

        self._thid = thid

    @property
    def credential_format(self):
        """Gets the credential_format of this IssueCredentialRecord.  # noqa: E501

        The credential format for this offer.  # noqa: E501

        :return: The credential_format of this IssueCredentialRecord.  # noqa: E501
        :rtype: str
        """
        return self._credential_format

    @credential_format.setter
    def credential_format(self, credential_format):
        """Sets the credential_format of this IssueCredentialRecord.

        The credential format for this offer.  # noqa: E501

        :param credential_format: The credential_format of this IssueCredentialRecord.  # noqa: E501
        :type: str
        """
        if credential_format is None:
            raise ValueError("Invalid value for `credential_format`, must not be `None`")  # noqa: E501
        allowed_values = ["JWT", "AnonCreds"]  # noqa: E501
        if credential_format not in allowed_values:
            raise ValueError(
                "Invalid value for `credential_format` ({0}), must be one of {1}"  # noqa: E501
                .format(credential_format, allowed_values)
            )

        self._credential_format = credential_format

    @property
    def subject_id(self):
        """Gets the subject_id of this IssueCredentialRecord.  # noqa: E501

         The short-form subject Prism DID to which the JWT verifiable credential will be or has been issued. This parameter only applies if the offer is of type 'JWT' and will only exist in the cloud agent of the holder (it will be empty on the issuer side).   # noqa: E501

        :return: The subject_id of this IssueCredentialRecord.  # noqa: E501
        :rtype: str
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this IssueCredentialRecord.

         The short-form subject Prism DID to which the JWT verifiable credential will be or has been issued. This parameter only applies if the offer is of type 'JWT' and will only exist in the cloud agent of the holder (it will be empty on the issuer side).   # noqa: E501

        :param subject_id: The subject_id of this IssueCredentialRecord.  # noqa: E501
        :type: str
        """

        self._subject_id = subject_id

    @property
    def validity_period(self):
        """Gets the validity_period of this IssueCredentialRecord.  # noqa: E501

         The validity period in seconds of the verifiable credential that will be issued. This parameter will only exist in the cloud agent of the issuer (it will be empty on the holder side).   # noqa: E501

        :return: The validity_period of this IssueCredentialRecord.  # noqa: E501
        :rtype: float
        """
        return self._validity_period

    @validity_period.setter
    def validity_period(self, validity_period):
        """Sets the validity_period of this IssueCredentialRecord.

         The validity period in seconds of the verifiable credential that will be issued. This parameter will only exist in the cloud agent of the issuer (it will be empty on the holder side).   # noqa: E501

        :param validity_period: The validity_period of this IssueCredentialRecord.  # noqa: E501
        :type: float
        """

        self._validity_period = validity_period

    @property
    def claims(self):
        """Gets the claims of this IssueCredentialRecord.  # noqa: E501

         The set of claims included in the issued credential.   # noqa: E501

        :return: The claims of this IssueCredentialRecord.  # noqa: E501
        :rtype: object
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this IssueCredentialRecord.

         The set of claims included in the issued credential.   # noqa: E501

        :param claims: The claims of this IssueCredentialRecord.  # noqa: E501
        :type: object
        """
        if claims is None:
            raise ValueError("Invalid value for `claims`, must not be `None`")  # noqa: E501

        self._claims = claims

    @property
    def automatic_issuance(self):
        """Gets the automatic_issuance of this IssueCredentialRecord.  # noqa: E501

         Specifies whether or not the credential is automatically generated and issued when receiving the `CredentialRequest` from the holder. If set to `false`, a manual approval by the issuer via another API call will be required for the VC to be issued. This parameter will only exist in the cloud agent of the issuer (it will be empty on the holder side).   # noqa: E501

        :return: The automatic_issuance of this IssueCredentialRecord.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_issuance

    @automatic_issuance.setter
    def automatic_issuance(self, automatic_issuance):
        """Sets the automatic_issuance of this IssueCredentialRecord.

         Specifies whether or not the credential is automatically generated and issued when receiving the `CredentialRequest` from the holder. If set to `false`, a manual approval by the issuer via another API call will be required for the VC to be issued. This parameter will only exist in the cloud agent of the issuer (it will be empty on the holder side).   # noqa: E501

        :param automatic_issuance: The automatic_issuance of this IssueCredentialRecord.  # noqa: E501
        :type: bool
        """

        self._automatic_issuance = automatic_issuance

    @property
    def created_at(self):
        """Gets the created_at of this IssueCredentialRecord.  # noqa: E501

        The date and time when the issue credential record was created.  # noqa: E501

        :return: The created_at of this IssueCredentialRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this IssueCredentialRecord.

        The date and time when the issue credential record was created.  # noqa: E501

        :param created_at: The created_at of this IssueCredentialRecord.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this IssueCredentialRecord.  # noqa: E501

        The date and time when the issue credential record was last updated.  # noqa: E501

        :return: The updated_at of this IssueCredentialRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this IssueCredentialRecord.

        The date and time when the issue credential record was last updated.  # noqa: E501

        :param updated_at: The updated_at of this IssueCredentialRecord.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def role(self):
        """Gets the role of this IssueCredentialRecord.  # noqa: E501

        The role played by the agent in the credential issuance flow.  # noqa: E501

        :return: The role of this IssueCredentialRecord.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this IssueCredentialRecord.

        The role played by the agent in the credential issuance flow.  # noqa: E501

        :param role: The role of this IssueCredentialRecord.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["Issuer", "Holder"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def protocol_state(self):
        """Gets the protocol_state of this IssueCredentialRecord.  # noqa: E501

        The current state of the issue credential protocol execution.  # noqa: E501

        :return: The protocol_state of this IssueCredentialRecord.  # noqa: E501
        :rtype: str
        """
        return self._protocol_state

    @protocol_state.setter
    def protocol_state(self, protocol_state):
        """Sets the protocol_state of this IssueCredentialRecord.

        The current state of the issue credential protocol execution.  # noqa: E501

        :param protocol_state: The protocol_state of this IssueCredentialRecord.  # noqa: E501
        :type: str
        """
        if protocol_state is None:
            raise ValueError("Invalid value for `protocol_state`, must not be `None`")  # noqa: E501
        allowed_values = ["OfferPending", "OfferSent", "OfferReceived", "RequestPending", "RequestGenerated", "RequestSent", "RequestReceived", "CredentialPending", "CredentialGenerated", "CredentialSent", "CredentialReceived", "ProblemReportPending", "ProblemReportSent", "ProblemReportReceived"]  # noqa: E501
        if protocol_state not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol_state` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol_state, allowed_values)
            )

        self._protocol_state = protocol_state

    @property
    def credential(self):
        """Gets the credential of this IssueCredentialRecord.  # noqa: E501

        The base64-encoded credential that was issued by the issuer agent, in 'JWT' or 'AnonCreds' format depending on the offer type.  # noqa: E501

        :return: The credential of this IssueCredentialRecord.  # noqa: E501
        :rtype: str
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this IssueCredentialRecord.

        The base64-encoded credential that was issued by the issuer agent, in 'JWT' or 'AnonCreds' format depending on the offer type.  # noqa: E501

        :param credential: The credential of this IssueCredentialRecord.  # noqa: E501
        :type: str
        """

        self._credential = credential

    @property
    def issuing_did(self):
        """Gets the issuing_did of this IssueCredentialRecord.  # noqa: E501

         The short-form issuer Prism DID by which the JWT verifiable credential will be or has been issued. Note that this parameter only applies when the offer is type 'JWT'.   # noqa: E501

        :return: The issuing_did of this IssueCredentialRecord.  # noqa: E501
        :rtype: str
        """
        return self._issuing_did

    @issuing_did.setter
    def issuing_did(self, issuing_did):
        """Sets the issuing_did of this IssueCredentialRecord.

         The short-form issuer Prism DID by which the JWT verifiable credential will be or has been issued. Note that this parameter only applies when the offer is type 'JWT'.   # noqa: E501

        :param issuing_did: The issuing_did of this IssueCredentialRecord.  # noqa: E501
        :type: str
        """

        self._issuing_did = issuing_did

    @property
    def meta_retries(self):
        """Gets the meta_retries of this IssueCredentialRecord.  # noqa: E501

        The maximum background processing attempts remaining for this record.  # noqa: E501

        :return: The meta_retries of this IssueCredentialRecord.  # noqa: E501
        :rtype: int
        """
        return self._meta_retries

    @meta_retries.setter
    def meta_retries(self, meta_retries):
        """Sets the meta_retries of this IssueCredentialRecord.

        The maximum background processing attempts remaining for this record.  # noqa: E501

        :param meta_retries: The meta_retries of this IssueCredentialRecord.  # noqa: E501
        :type: int
        """
        if meta_retries is None:
            raise ValueError("Invalid value for `meta_retries`, must not be `None`")  # noqa: E501

        self._meta_retries = meta_retries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IssueCredentialRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IssueCredentialRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
