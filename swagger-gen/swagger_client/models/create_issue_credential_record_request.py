# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateIssueCredentialRecordRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'validity_period': 'float',
        'schema_id': 'str',
        'credential_definition_id': 'str',
        'credential_format': 'str',
        'claims': 'object',
        'automatic_issuance': 'bool',
        'issuing_did': 'str',
        'connection_id': 'str'
    }

    attribute_map = {
        'validity_period': 'validityPeriod',
        'schema_id': 'schemaId',
        'credential_definition_id': 'credentialDefinitionId',
        'credential_format': 'credentialFormat',
        'claims': 'claims',
        'automatic_issuance': 'automaticIssuance',
        'issuing_did': 'issuingDID',
        'connection_id': 'connectionId'
    }

    def __init__(self, validity_period=None, schema_id=None, credential_definition_id=None, credential_format=None, claims=None, automatic_issuance=None, issuing_did=None, connection_id=None):  # noqa: E501
        """CreateIssueCredentialRecordRequest - a model defined in Swagger"""  # noqa: E501
        self._validity_period = None
        self._schema_id = None
        self._credential_definition_id = None
        self._credential_format = None
        self._claims = None
        self._automatic_issuance = None
        self._issuing_did = None
        self._connection_id = None
        self.discriminator = None
        if validity_period is not None:
            self.validity_period = validity_period
        if schema_id is not None:
            self.schema_id = schema_id
        if credential_definition_id is not None:
            self.credential_definition_id = credential_definition_id
        if credential_format is not None:
            self.credential_format = credential_format
        self.claims = claims
        if automatic_issuance is not None:
            self.automatic_issuance = automatic_issuance
        if issuing_did is not None:
            self.issuing_did = issuing_did
        self.connection_id = connection_id

    @property
    def validity_period(self):
        """Gets the validity_period of this CreateIssueCredentialRecordRequest.  # noqa: E501

        The validity period in seconds of the verifiable credential that will be issued.  # noqa: E501

        :return: The validity_period of this CreateIssueCredentialRecordRequest.  # noqa: E501
        :rtype: float
        """
        return self._validity_period

    @validity_period.setter
    def validity_period(self, validity_period):
        """Sets the validity_period of this CreateIssueCredentialRecordRequest.

        The validity period in seconds of the verifiable credential that will be issued.  # noqa: E501

        :param validity_period: The validity_period of this CreateIssueCredentialRecordRequest.  # noqa: E501
        :type: float
        """

        self._validity_period = validity_period

    @property
    def schema_id(self):
        """Gets the schema_id of this CreateIssueCredentialRecordRequest.  # noqa: E501

         The URL pointing to the JSON schema that will be used for this offer (should be 'http' or 'https'). When dereferenced, the returned content should be a JSON schema compliant with the '[Draft 2020-12](https://json-schema.org/draft/2020-12/release-notes)' version of the specification. Note that this parameter only applies when the offer is of type 'JWT'.   # noqa: E501

        :return: The schema_id of this CreateIssueCredentialRecordRequest.  # noqa: E501
        :rtype: str
        """
        return self._schema_id

    @schema_id.setter
    def schema_id(self, schema_id):
        """Sets the schema_id of this CreateIssueCredentialRecordRequest.

         The URL pointing to the JSON schema that will be used for this offer (should be 'http' or 'https'). When dereferenced, the returned content should be a JSON schema compliant with the '[Draft 2020-12](https://json-schema.org/draft/2020-12/release-notes)' version of the specification. Note that this parameter only applies when the offer is of type 'JWT'.   # noqa: E501

        :param schema_id: The schema_id of this CreateIssueCredentialRecordRequest.  # noqa: E501
        :type: str
        """

        self._schema_id = schema_id

    @property
    def credential_definition_id(self):
        """Gets the credential_definition_id of this CreateIssueCredentialRecordRequest.  # noqa: E501

         The unique identifier (UUID) of the credential definition that will be used for this offer. It should be the identifier of a credential definition that exists in the issuer agent's database. Note that this parameter only applies when the offer is of type 'AnonCreds'.   # noqa: E501

        :return: The credential_definition_id of this CreateIssueCredentialRecordRequest.  # noqa: E501
        :rtype: str
        """
        return self._credential_definition_id

    @credential_definition_id.setter
    def credential_definition_id(self, credential_definition_id):
        """Sets the credential_definition_id of this CreateIssueCredentialRecordRequest.

         The unique identifier (UUID) of the credential definition that will be used for this offer. It should be the identifier of a credential definition that exists in the issuer agent's database. Note that this parameter only applies when the offer is of type 'AnonCreds'.   # noqa: E501

        :param credential_definition_id: The credential_definition_id of this CreateIssueCredentialRecordRequest.  # noqa: E501
        :type: str
        """

        self._credential_definition_id = credential_definition_id

    @property
    def credential_format(self):
        """Gets the credential_format of this CreateIssueCredentialRecordRequest.  # noqa: E501

        The credential format for this offer (defaults to 'JWT')  # noqa: E501

        :return: The credential_format of this CreateIssueCredentialRecordRequest.  # noqa: E501
        :rtype: str
        """
        return self._credential_format

    @credential_format.setter
    def credential_format(self, credential_format):
        """Sets the credential_format of this CreateIssueCredentialRecordRequest.

        The credential format for this offer (defaults to 'JWT')  # noqa: E501

        :param credential_format: The credential_format of this CreateIssueCredentialRecordRequest.  # noqa: E501
        :type: str
        """

        self._credential_format = credential_format

    @property
    def claims(self):
        """Gets the claims of this CreateIssueCredentialRecordRequest.  # noqa: E501

         The set of claims that will be included in the issued credential. The JSON object should comply with the schema applicable for this offer (i.e. 'schemaId' or 'credentialDefinitionId').   # noqa: E501

        :return: The claims of this CreateIssueCredentialRecordRequest.  # noqa: E501
        :rtype: object
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this CreateIssueCredentialRecordRequest.

         The set of claims that will be included in the issued credential. The JSON object should comply with the schema applicable for this offer (i.e. 'schemaId' or 'credentialDefinitionId').   # noqa: E501

        :param claims: The claims of this CreateIssueCredentialRecordRequest.  # noqa: E501
        :type: object
        """
        if claims is None:
            raise ValueError("Invalid value for `claims`, must not be `None`")  # noqa: E501

        self._claims = claims

    @property
    def automatic_issuance(self):
        """Gets the automatic_issuance of this CreateIssueCredentialRecordRequest.  # noqa: E501

         Specifies whether or not the credential should be automatically generated and issued when receiving the `CredentialRequest` from the holder. If set to `false`, a manual approval by the issuer via another API call will be required for the VC to be issued.   # noqa: E501

        :return: The automatic_issuance of this CreateIssueCredentialRecordRequest.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_issuance

    @automatic_issuance.setter
    def automatic_issuance(self, automatic_issuance):
        """Sets the automatic_issuance of this CreateIssueCredentialRecordRequest.

         Specifies whether or not the credential should be automatically generated and issued when receiving the `CredentialRequest` from the holder. If set to `false`, a manual approval by the issuer via another API call will be required for the VC to be issued.   # noqa: E501

        :param automatic_issuance: The automatic_issuance of this CreateIssueCredentialRecordRequest.  # noqa: E501
        :type: bool
        """

        self._automatic_issuance = automatic_issuance

    @property
    def issuing_did(self):
        """Gets the issuing_did of this CreateIssueCredentialRecordRequest.  # noqa: E501

         The short-form issuer Prism DID by which the JWT verifiable credential will be issued. Note that this parameter only applies when the offer is type 'JWT'.   # noqa: E501

        :return: The issuing_did of this CreateIssueCredentialRecordRequest.  # noqa: E501
        :rtype: str
        """
        return self._issuing_did

    @issuing_did.setter
    def issuing_did(self, issuing_did):
        """Sets the issuing_did of this CreateIssueCredentialRecordRequest.

         The short-form issuer Prism DID by which the JWT verifiable credential will be issued. Note that this parameter only applies when the offer is type 'JWT'.   # noqa: E501

        :param issuing_did: The issuing_did of this CreateIssueCredentialRecordRequest.  # noqa: E501
        :type: str
        """

        self._issuing_did = issuing_did

    @property
    def connection_id(self):
        """Gets the connection_id of this CreateIssueCredentialRecordRequest.  # noqa: E501

         The unique identifier of a DIDComm connection that already exists between the this issuer agent and the holder cloud or edeg agent. It should be the identifier of a connection that exists in the issuer agent's database. This connection will be used to execute the issue credential protocol.   # noqa: E501

        :return: The connection_id of this CreateIssueCredentialRecordRequest.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this CreateIssueCredentialRecordRequest.

         The unique identifier of a DIDComm connection that already exists between the this issuer agent and the holder cloud or edeg agent. It should be the identifier of a connection that exists in the issuer agent's database. This connection will be used to execute the issue credential protocol.   # noqa: E501

        :param connection_id: The connection_id of this CreateIssueCredentialRecordRequest.  # noqa: E501
        :type: str
        """
        if connection_id is None:
            raise ValueError("Invalid value for `connection_id`, must not be `None`")  # noqa: E501

        self._connection_id = connection_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateIssueCredentialRecordRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateIssueCredentialRecordRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
