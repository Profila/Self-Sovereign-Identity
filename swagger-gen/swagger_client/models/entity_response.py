# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EntityResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'str',
        '_self': 'str',
        'id': 'str',
        'name': 'str',
        'wallet_id': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'kind': 'kind',
        '_self': 'self',
        'id': 'id',
        'name': 'name',
        'wallet_id': 'walletId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, kind=None, _self=None, id=None, name=None, wallet_id=None, created_at=None, updated_at=None):  # noqa: E501
        """EntityResponse - a model defined in Swagger"""  # noqa: E501
        self._kind = None
        self.__self = None
        self._id = None
        self._name = None
        self._wallet_id = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        self.kind = kind
        self._self = _self
        self.id = id
        self.name = name
        self.wallet_id = wallet_id
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def kind(self):
        """Gets the kind of this EntityResponse.  # noqa: E501

        The `kind` of the entity.  # noqa: E501

        :return: The kind of this EntityResponse.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this EntityResponse.

        The `kind` of the entity.  # noqa: E501

        :param kind: The kind of this EntityResponse.  # noqa: E501
        :type: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def _self(self):
        """Gets the _self of this EntityResponse.  # noqa: E501

        The `self` link of the entity.  # noqa: E501

        :return: The _self of this EntityResponse.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this EntityResponse.

        The `self` link of the entity.  # noqa: E501

        :param _self: The _self of this EntityResponse.  # noqa: E501
        :type: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")  # noqa: E501

        self.__self = _self

    @property
    def id(self):
        """Gets the id of this EntityResponse.  # noqa: E501

        The unique `id` of the entity  # noqa: E501

        :return: The id of this EntityResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EntityResponse.

        The unique `id` of the entity  # noqa: E501

        :param id: The id of this EntityResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this EntityResponse.  # noqa: E501

        The `name` of the entity.  # noqa: E501

        :return: The name of this EntityResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EntityResponse.

        The `name` of the entity.  # noqa: E501

        :param name: The name of this EntityResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def wallet_id(self):
        """Gets the wallet_id of this EntityResponse.  # noqa: E501

        The `walletId` owned by the entity.  # noqa: E501

        :return: The wallet_id of this EntityResponse.  # noqa: E501
        :rtype: str
        """
        return self._wallet_id

    @wallet_id.setter
    def wallet_id(self, wallet_id):
        """Sets the wallet_id of this EntityResponse.

        The `walletId` owned by the entity.  # noqa: E501

        :param wallet_id: The wallet_id of this EntityResponse.  # noqa: E501
        :type: str
        """
        if wallet_id is None:
            raise ValueError("Invalid value for `wallet_id`, must not be `None`")  # noqa: E501

        self._wallet_id = wallet_id

    @property
    def created_at(self):
        """Gets the created_at of this EntityResponse.  # noqa: E501

        The `createdAt` timestamp of the entity.  # noqa: E501

        :return: The created_at of this EntityResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this EntityResponse.

        The `createdAt` timestamp of the entity.  # noqa: E501

        :param created_at: The created_at of this EntityResponse.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this EntityResponse.  # noqa: E501

        The `updatedAt` timestamp of the entity.  # noqa: E501

        :return: The updated_at of this EntityResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this EntityResponse.

        The `updatedAt` timestamp of the entity.  # noqa: E501

        :param updated_at: The updated_at of this EntityResponse.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EntityResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EntityResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
