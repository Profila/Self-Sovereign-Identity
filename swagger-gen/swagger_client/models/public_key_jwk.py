# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PublicKeyJwk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crv': 'str',
        'x': 'str',
        'y': 'str',
        'kty': 'str'
    }

    attribute_map = {
        'crv': 'crv',
        'x': 'x',
        'y': 'y',
        'kty': 'kty'
    }

    def __init__(self, crv=None, x=None, y=None, kty=None):  # noqa: E501
        """PublicKeyJwk - a model defined in Swagger"""  # noqa: E501
        self._crv = None
        self._x = None
        self._y = None
        self._kty = None
        self.discriminator = None
        if crv is not None:
            self.crv = crv
        if x is not None:
            self.x = x
        if y is not None:
            self.y = y
        self.kty = kty

    @property
    def crv(self):
        """Gets the crv of this PublicKeyJwk.  # noqa: E501


        :return: The crv of this PublicKeyJwk.  # noqa: E501
        :rtype: str
        """
        return self._crv

    @crv.setter
    def crv(self, crv):
        """Sets the crv of this PublicKeyJwk.


        :param crv: The crv of this PublicKeyJwk.  # noqa: E501
        :type: str
        """

        self._crv = crv

    @property
    def x(self):
        """Gets the x of this PublicKeyJwk.  # noqa: E501


        :return: The x of this PublicKeyJwk.  # noqa: E501
        :rtype: str
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this PublicKeyJwk.


        :param x: The x of this PublicKeyJwk.  # noqa: E501
        :type: str
        """

        self._x = x

    @property
    def y(self):
        """Gets the y of this PublicKeyJwk.  # noqa: E501


        :return: The y of this PublicKeyJwk.  # noqa: E501
        :rtype: str
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this PublicKeyJwk.


        :param y: The y of this PublicKeyJwk.  # noqa: E501
        :type: str
        """

        self._y = y

    @property
    def kty(self):
        """Gets the kty of this PublicKeyJwk.  # noqa: E501


        :return: The kty of this PublicKeyJwk.  # noqa: E501
        :rtype: str
        """
        return self._kty

    @kty.setter
    def kty(self, kty):
        """Sets the kty of this PublicKeyJwk.


        :param kty: The kty of this PublicKeyJwk.  # noqa: E501
        :type: str
        """
        if kty is None:
            raise ValueError("Invalid value for `kty`, must not be `None`")  # noqa: E501

        self._kty = kty

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicKeyJwk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicKeyJwk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
