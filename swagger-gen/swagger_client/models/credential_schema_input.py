# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CredentialSchemaInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'version': 'str',
        'description': 'str',
        'type': 'str',
        'schema': 'object',
        'tags': 'list[str]',
        'author': 'str'
    }

    attribute_map = {
        'name': 'name',
        'version': 'version',
        'description': 'description',
        'type': 'type',
        'schema': 'schema',
        'tags': 'tags',
        'author': 'author'
    }

    def __init__(self, name=None, version=None, description=None, type=None, schema=None, tags=None, author=None):  # noqa: E501
        """CredentialSchemaInput - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._version = None
        self._description = None
        self._type = None
        self._schema = None
        self._tags = None
        self._author = None
        self.discriminator = None
        self.name = name
        self.version = version
        if description is not None:
            self.description = description
        self.type = type
        self.schema = schema
        if tags is not None:
            self.tags = tags
        self.author = author

    @property
    def name(self):
        """Gets the name of this CredentialSchemaInput.  # noqa: E501

        A human-readable name for the credential schema. A piece of Metadata.  # noqa: E501

        :return: The name of this CredentialSchemaInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CredentialSchemaInput.

        A human-readable name for the credential schema. A piece of Metadata.  # noqa: E501

        :param name: The name of this CredentialSchemaInput.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self):
        """Gets the version of this CredentialSchemaInput.  # noqa: E501

        Denotes the revision of a given Credential Schema. It should follow semantic version convention to describe the impact of the schema evolution.  # noqa: E501

        :return: The version of this CredentialSchemaInput.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CredentialSchemaInput.

        Denotes the revision of a given Credential Schema. It should follow semantic version convention to describe the impact of the schema evolution.  # noqa: E501

        :param version: The version of this CredentialSchemaInput.  # noqa: E501
        :type: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def description(self):
        """Gets the description of this CredentialSchemaInput.  # noqa: E501

        A human-readable description of the credential schema  # noqa: E501

        :return: The description of this CredentialSchemaInput.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CredentialSchemaInput.

        A human-readable description of the credential schema  # noqa: E501

        :param description: The description of this CredentialSchemaInput.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def type(self):
        """Gets the type of this CredentialSchemaInput.  # noqa: E501

        This field resolves to a JSON schema with details about the schema metadata that applies to the schema. A piece of Metadata.  # noqa: E501

        :return: The type of this CredentialSchemaInput.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CredentialSchemaInput.

        This field resolves to a JSON schema with details about the schema metadata that applies to the schema. A piece of Metadata.  # noqa: E501

        :param type: The type of this CredentialSchemaInput.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def schema(self):
        """Gets the schema of this CredentialSchemaInput.  # noqa: E501

        Valid JSON Schema where the Credential Schema data fields are defined. A piece of Metadata  # noqa: E501

        :return: The schema of this CredentialSchemaInput.  # noqa: E501
        :rtype: object
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this CredentialSchemaInput.

        Valid JSON Schema where the Credential Schema data fields are defined. A piece of Metadata  # noqa: E501

        :param schema: The schema of this CredentialSchemaInput.  # noqa: E501
        :type: object
        """
        if schema is None:
            raise ValueError("Invalid value for `schema`, must not be `None`")  # noqa: E501

        self._schema = schema

    @property
    def tags(self):
        """Gets the tags of this CredentialSchemaInput.  # noqa: E501

        Tokens that allow to lookup and filter the credential schema records.  # noqa: E501

        :return: The tags of this CredentialSchemaInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CredentialSchemaInput.

        Tokens that allow to lookup and filter the credential schema records.  # noqa: E501

        :param tags: The tags of this CredentialSchemaInput.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def author(self):
        """Gets the author of this CredentialSchemaInput.  # noqa: E501

        DID of the identity which authored the credential schema. A piece of Metadata.  # noqa: E501

        :return: The author of this CredentialSchemaInput.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this CredentialSchemaInput.

        DID of the identity which authored the credential schema. A piece of Metadata.  # noqa: E501

        :param author: The author of this CredentialSchemaInput.  # noqa: E501
        :type: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CredentialSchemaInput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredentialSchemaInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
