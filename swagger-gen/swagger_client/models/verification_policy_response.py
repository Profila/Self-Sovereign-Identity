# coding: utf-8

"""
    Open Enterprise Agent API Reference

     The Open Enterprise Agent API facilitates the integration and management of self-sovereign identity capabilities within applications. It supports DID (Decentralized Identifiers) management, verifiable credential exchange, and secure messaging based on DIDComm standards. The API is designed to be interoperable with various blockchain and DLT (Distributed Ledger Technology) platforms, ensuring wide compatibility and flexibility. Key features include connection management, credential issuance and verification, and secure, privacy-preserving communication between entities. Additional information and the full list of capabilities can be found in the [Open Enterprise Agent documentation](https://docs.atalaprism.io/docs/category/prism-cloud-agent)   # noqa: E501

    OpenAPI spec version: 1.31.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VerificationPolicyResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'str',
        'kind': 'str',
        'id': 'str',
        'nonce': 'int',
        'name': 'str',
        'description': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'constraints': 'list[VerificationPolicyConstraint]'
    }

    attribute_map = {
        '_self': 'self',
        'kind': 'kind',
        'id': 'id',
        'nonce': 'nonce',
        'name': 'name',
        'description': 'description',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'constraints': 'constraints'
    }

    def __init__(self, _self=None, kind=None, id=None, nonce=None, name=None, description=None, created_at=None, updated_at=None, constraints=None):  # noqa: E501
        """VerificationPolicyResponse - a model defined in Swagger"""  # noqa: E501
        self.__self = None
        self._kind = None
        self._id = None
        self._nonce = None
        self._name = None
        self._description = None
        self._created_at = None
        self._updated_at = None
        self._constraints = None
        self.discriminator = None
        self._self = _self
        self.kind = kind
        self.id = id
        self.nonce = nonce
        self.name = name
        self.description = description
        self.created_at = created_at
        self.updated_at = updated_at
        if constraints is not None:
            self.constraints = constraints

    @property
    def _self(self):
        """Gets the _self of this VerificationPolicyResponse.  # noqa: E501

        The URL that uniquely identifies the resource being returned in the response.  # noqa: E501

        :return: The _self of this VerificationPolicyResponse.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this VerificationPolicyResponse.

        The URL that uniquely identifies the resource being returned in the response.  # noqa: E501

        :param _self: The _self of this VerificationPolicyResponse.  # noqa: E501
        :type: str
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")  # noqa: E501

        self.__self = _self

    @property
    def kind(self):
        """Gets the kind of this VerificationPolicyResponse.  # noqa: E501

        A string that identifies the type of resource being returned in the response.  # noqa: E501

        :return: The kind of this VerificationPolicyResponse.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this VerificationPolicyResponse.

        A string that identifies the type of resource being returned in the response.  # noqa: E501

        :param kind: The kind of this VerificationPolicyResponse.  # noqa: E501
        :type: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this VerificationPolicyResponse.  # noqa: E501

        A unique identifier to address the verification policy instance. UUID is generated by the backend.  # noqa: E501

        :return: The id of this VerificationPolicyResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VerificationPolicyResponse.

        A unique identifier to address the verification policy instance. UUID is generated by the backend.  # noqa: E501

        :param id: The id of this VerificationPolicyResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def nonce(self):
        """Gets the nonce of this VerificationPolicyResponse.  # noqa: E501

        A number that is changed every time the verification policy is updated.  # noqa: E501

        :return: The nonce of this VerificationPolicyResponse.  # noqa: E501
        :rtype: int
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this VerificationPolicyResponse.

        A number that is changed every time the verification policy is updated.  # noqa: E501

        :param nonce: The nonce of this VerificationPolicyResponse.  # noqa: E501
        :type: int
        """
        if nonce is None:
            raise ValueError("Invalid value for `nonce`, must not be `None`")  # noqa: E501

        self._nonce = nonce

    @property
    def name(self):
        """Gets the name of this VerificationPolicyResponse.  # noqa: E501

        A human-readable name for the verification policy. The `name` cannot be empty.  # noqa: E501

        :return: The name of this VerificationPolicyResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VerificationPolicyResponse.

        A human-readable name for the verification policy. The `name` cannot be empty.  # noqa: E501

        :param name: The name of this VerificationPolicyResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this VerificationPolicyResponse.  # noqa: E501

        A human-readable description of the verification policy.  # noqa: E501

        :return: The description of this VerificationPolicyResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VerificationPolicyResponse.

        A human-readable description of the verification policy.  # noqa: E501

        :param description: The description of this VerificationPolicyResponse.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def created_at(self):
        """Gets the created_at of this VerificationPolicyResponse.  # noqa: E501

        [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) date on which the verification policy was created.  # noqa: E501

        :return: The created_at of this VerificationPolicyResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this VerificationPolicyResponse.

        [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) date on which the verification policy was created.  # noqa: E501

        :param created_at: The created_at of this VerificationPolicyResponse.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this VerificationPolicyResponse.  # noqa: E501

        [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) date on which the verification policy was updated.  # noqa: E501

        :return: The updated_at of this VerificationPolicyResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this VerificationPolicyResponse.

        [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) date on which the verification policy was updated.  # noqa: E501

        :param updated_at: The updated_at of this VerificationPolicyResponse.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def constraints(self):
        """Gets the constraints of this VerificationPolicyResponse.  # noqa: E501

        The object that describes the constraints of the verification policy. Each constraint is a tuple of the `schemaId` and a set of DIDs of the trusted issuers.  # noqa: E501

        :return: The constraints of this VerificationPolicyResponse.  # noqa: E501
        :rtype: list[VerificationPolicyConstraint]
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints):
        """Sets the constraints of this VerificationPolicyResponse.

        The object that describes the constraints of the verification policy. Each constraint is a tuple of the `schemaId` and a set of DIDs of the trusted issuers.  # noqa: E501

        :param constraints: The constraints of this VerificationPolicyResponse.  # noqa: E501
        :type: list[VerificationPolicyConstraint]
        """

        self._constraints = constraints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VerificationPolicyResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerificationPolicyResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
